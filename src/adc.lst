                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Feb  3 2010) (UNIX)
                              4 ; This file was generated Sun Feb 20 14:49:25 2011
                              5 ;--------------------------------------------------------
                              6 	.module adc
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _CCF0
                             13 	.globl _CCF1
                             14 	.globl _CCF2
                             15 	.globl _CCF3
                             16 	.globl _CCF4
                             17 	.globl _CR
                             18 	.globl _CF
                             19 	.globl _ECAN
                             20 	.globl _EADC
                             21 	.globl _ETIM
                             22 	.globl _EX0
                             23 	.globl _ET0
                             24 	.globl _EX1
                             25 	.globl _ET1
                             26 	.globl _ES
                             27 	.globl _ET2
                             28 	.globl _EC
                             29 	.globl _EA
                             30 	.globl _RI
                             31 	.globl _TI
                             32 	.globl _RB8
                             33 	.globl _TB8
                             34 	.globl _REN
                             35 	.globl _SM2
                             36 	.globl _SM1
                             37 	.globl _FE
                             38 	.globl _SM0
                             39 	.globl _CP_RL2
                             40 	.globl _C_T2
                             41 	.globl _TR2
                             42 	.globl _EXEN2
                             43 	.globl _TCLK
                             44 	.globl _RCLK
                             45 	.globl _EXF2
                             46 	.globl _TF2
                             47 	.globl _IT0
                             48 	.globl _IE0
                             49 	.globl _IT1
                             50 	.globl _IE1
                             51 	.globl _TR0
                             52 	.globl _TF0
                             53 	.globl _TR1
                             54 	.globl _TF1
                             55 	.globl _P
                             56 	.globl _UD
                             57 	.globl _OV
                             58 	.globl _RS0
                             59 	.globl _RS1
                             60 	.globl _F0
                             61 	.globl _AC
                             62 	.globl _CY
                             63 	.globl _P4_0
                             64 	.globl _P4_1
                             65 	.globl _RXD
                             66 	.globl _TXD
                             67 	.globl _INT0
                             68 	.globl _INT1
                             69 	.globl _T0
                             70 	.globl _T1
                             71 	.globl _WR
                             72 	.globl _RD
                             73 	.globl _P3_0
                             74 	.globl _P3_1
                             75 	.globl _P3_2
                             76 	.globl _P3_3
                             77 	.globl _P3_4
                             78 	.globl _P3_5
                             79 	.globl _P3_6
                             80 	.globl _P3_7
                             81 	.globl _P2_0
                             82 	.globl _P2_1
                             83 	.globl _P1_0
                             84 	.globl _P1_1
                             85 	.globl _P1_2
                             86 	.globl _P1_3
                             87 	.globl _P1_4
                             88 	.globl _P1_5
                             89 	.globl _P1_6
                             90 	.globl _P1_7
                             91 	.globl _CANEN
                             92 	.globl _CANIDM4
                             93 	.globl _CANIDM3
                             94 	.globl _CANIDM2
                             95 	.globl _CANIDM1
                             96 	.globl _CANIE
                             97 	.globl _CANGIE
                             98 	.globl _CANIDT4
                             99 	.globl _CANIDT3
                            100 	.globl _CANIDT2
                            101 	.globl _CANIDT1
                            102 	.globl _CANSIT
                            103 	.globl _CANBT3
                            104 	.globl _CANBT2
                            105 	.globl _CANBT1
                            106 	.globl _CANCONCH
                            107 	.globl _CANSTCH
                            108 	.globl _CANPAGE
                            109 	.globl _CANSTMPH
                            110 	.globl _CANSTMPL
                            111 	.globl _CANTIMH
                            112 	.globl _CANTIML
                            113 	.globl _CANGCON
                            114 	.globl _CANGSTA
                            115 	.globl _CANTTCH
                            116 	.globl _CANTTCL
                            117 	.globl _CANMSG
                            118 	.globl _CANTCON
                            119 	.globl _CANREC
                            120 	.globl _CANTEC
                            121 	.globl _CANGIT
                            122 	.globl _CCAPM4
                            123 	.globl _CCAP4L
                            124 	.globl _CCAP4H
                            125 	.globl _CCAPM3
                            126 	.globl _CCAP3L
                            127 	.globl _CCAP3H
                            128 	.globl _CCAPM2
                            129 	.globl _CCAP2L
                            130 	.globl _CCAP2H
                            131 	.globl _CCAPM1
                            132 	.globl _CCAP1L
                            133 	.globl _CCAP1H
                            134 	.globl _CCAPM0
                            135 	.globl _CCAP0L
                            136 	.globl _CCAP0H
                            137 	.globl _CL
                            138 	.globl _CH
                            139 	.globl _CMOD
                            140 	.globl _CCON
                            141 	.globl _IEN1
                            142 	.globl _IPH0
                            143 	.globl _IPL0
                            144 	.globl _IEN0
                            145 	.globl _IPH1
                            146 	.globl _IPL1
                            147 	.globl _AUXR1
                            148 	.globl _AUXR
                            149 	.globl _EECON
                            150 	.globl _FCON
                            151 	.globl _ADCF
                            152 	.globl _ADDH
                            153 	.globl _ADDL
                            154 	.globl _ADCON
                            155 	.globl _ADCLK
                            156 	.globl _SADDR
                            157 	.globl _SADEN
                            158 	.globl _SBUF
                            159 	.globl _SCON
                            160 	.globl _WDTPRG
                            161 	.globl _WDTRST
                            162 	.globl _RCAP2H
                            163 	.globl _RCAP2L
                            164 	.globl _TH2
                            165 	.globl _TH1
                            166 	.globl _TH0
                            167 	.globl _TL2
                            168 	.globl _TL1
                            169 	.globl _TL0
                            170 	.globl _T2MOD
                            171 	.globl _T2CON
                            172 	.globl _TMOD
                            173 	.globl _TCON
                            174 	.globl _CKCON
                            175 	.globl _PCON
                            176 	.globl _DPH
                            177 	.globl _DPL
                            178 	.globl _SP
                            179 	.globl _B
                            180 	.globl _ACC
                            181 	.globl _PSW
                            182 	.globl _P4
                            183 	.globl _P3
                            184 	.globl _P2
                            185 	.globl _P1
                            186 	.globl _AdcInit
                            187 	.globl _AdcSetChannels
                            188 	.globl _AdcClearChannels
                            189 	.globl _Adc10BitConversion
                            190 	.globl _AdcStart10BitConversion
                            191 	.globl _AdcConversionReady
                            192 ;--------------------------------------------------------
                            193 ; special function registers
                            194 ;--------------------------------------------------------
                            195 	.area RSEG    (DATA)
                    0090    196 G$P1$0$0 == 0x0090
                    0090    197 _P1	=	0x0090
                    00A0    198 G$P2$0$0 == 0x00a0
                    00A0    199 _P2	=	0x00a0
                    00B0    200 G$P3$0$0 == 0x00b0
                    00B0    201 _P3	=	0x00b0
                    00C0    202 G$P4$0$0 == 0x00c0
                    00C0    203 _P4	=	0x00c0
                    00D0    204 G$PSW$0$0 == 0x00d0
                    00D0    205 _PSW	=	0x00d0
                    00E0    206 G$ACC$0$0 == 0x00e0
                    00E0    207 _ACC	=	0x00e0
                    00F0    208 G$B$0$0 == 0x00f0
                    00F0    209 _B	=	0x00f0
                    0081    210 G$SP$0$0 == 0x0081
                    0081    211 _SP	=	0x0081
                    0082    212 G$DPL$0$0 == 0x0082
                    0082    213 _DPL	=	0x0082
                    0083    214 G$DPH$0$0 == 0x0083
                    0083    215 _DPH	=	0x0083
                    0087    216 G$PCON$0$0 == 0x0087
                    0087    217 _PCON	=	0x0087
                    008F    218 G$CKCON$0$0 == 0x008f
                    008F    219 _CKCON	=	0x008f
                    0088    220 G$TCON$0$0 == 0x0088
                    0088    221 _TCON	=	0x0088
                    0089    222 G$TMOD$0$0 == 0x0089
                    0089    223 _TMOD	=	0x0089
                    00C8    224 G$T2CON$0$0 == 0x00c8
                    00C8    225 _T2CON	=	0x00c8
                    00C9    226 G$T2MOD$0$0 == 0x00c9
                    00C9    227 _T2MOD	=	0x00c9
                    008A    228 G$TL0$0$0 == 0x008a
                    008A    229 _TL0	=	0x008a
                    008B    230 G$TL1$0$0 == 0x008b
                    008B    231 _TL1	=	0x008b
                    00CC    232 G$TL2$0$0 == 0x00cc
                    00CC    233 _TL2	=	0x00cc
                    008C    234 G$TH0$0$0 == 0x008c
                    008C    235 _TH0	=	0x008c
                    008D    236 G$TH1$0$0 == 0x008d
                    008D    237 _TH1	=	0x008d
                    00CD    238 G$TH2$0$0 == 0x00cd
                    00CD    239 _TH2	=	0x00cd
                    00CA    240 G$RCAP2L$0$0 == 0x00ca
                    00CA    241 _RCAP2L	=	0x00ca
                    00CB    242 G$RCAP2H$0$0 == 0x00cb
                    00CB    243 _RCAP2H	=	0x00cb
                    00A6    244 G$WDTRST$0$0 == 0x00a6
                    00A6    245 _WDTRST	=	0x00a6
                    00A7    246 G$WDTPRG$0$0 == 0x00a7
                    00A7    247 _WDTPRG	=	0x00a7
                    0098    248 G$SCON$0$0 == 0x0098
                    0098    249 _SCON	=	0x0098
                    0099    250 G$SBUF$0$0 == 0x0099
                    0099    251 _SBUF	=	0x0099
                    00B9    252 G$SADEN$0$0 == 0x00b9
                    00B9    253 _SADEN	=	0x00b9
                    00A9    254 G$SADDR$0$0 == 0x00a9
                    00A9    255 _SADDR	=	0x00a9
                    00F2    256 G$ADCLK$0$0 == 0x00f2
                    00F2    257 _ADCLK	=	0x00f2
                    00F3    258 G$ADCON$0$0 == 0x00f3
                    00F3    259 _ADCON	=	0x00f3
                    00F4    260 G$ADDL$0$0 == 0x00f4
                    00F4    261 _ADDL	=	0x00f4
                    00F5    262 G$ADDH$0$0 == 0x00f5
                    00F5    263 _ADDH	=	0x00f5
                    00F6    264 G$ADCF$0$0 == 0x00f6
                    00F6    265 _ADCF	=	0x00f6
                    00D1    266 G$FCON$0$0 == 0x00d1
                    00D1    267 _FCON	=	0x00d1
                    00D2    268 G$EECON$0$0 == 0x00d2
                    00D2    269 _EECON	=	0x00d2
                    008E    270 G$AUXR$0$0 == 0x008e
                    008E    271 _AUXR	=	0x008e
                    00A2    272 G$AUXR1$0$0 == 0x00a2
                    00A2    273 _AUXR1	=	0x00a2
                    00F8    274 G$IPL1$0$0 == 0x00f8
                    00F8    275 _IPL1	=	0x00f8
                    00F7    276 G$IPH1$0$0 == 0x00f7
                    00F7    277 _IPH1	=	0x00f7
                    00A8    278 G$IEN0$0$0 == 0x00a8
                    00A8    279 _IEN0	=	0x00a8
                    00B8    280 G$IPL0$0$0 == 0x00b8
                    00B8    281 _IPL0	=	0x00b8
                    00B7    282 G$IPH0$0$0 == 0x00b7
                    00B7    283 _IPH0	=	0x00b7
                    00E8    284 G$IEN1$0$0 == 0x00e8
                    00E8    285 _IEN1	=	0x00e8
                    00D8    286 G$CCON$0$0 == 0x00d8
                    00D8    287 _CCON	=	0x00d8
                    00D9    288 G$CMOD$0$0 == 0x00d9
                    00D9    289 _CMOD	=	0x00d9
                    00F9    290 G$CH$0$0 == 0x00f9
                    00F9    291 _CH	=	0x00f9
                    00E9    292 G$CL$0$0 == 0x00e9
                    00E9    293 _CL	=	0x00e9
                    00FA    294 G$CCAP0H$0$0 == 0x00fa
                    00FA    295 _CCAP0H	=	0x00fa
                    00EA    296 G$CCAP0L$0$0 == 0x00ea
                    00EA    297 _CCAP0L	=	0x00ea
                    00DA    298 G$CCAPM0$0$0 == 0x00da
                    00DA    299 _CCAPM0	=	0x00da
                    00FB    300 G$CCAP1H$0$0 == 0x00fb
                    00FB    301 _CCAP1H	=	0x00fb
                    00EB    302 G$CCAP1L$0$0 == 0x00eb
                    00EB    303 _CCAP1L	=	0x00eb
                    00DB    304 G$CCAPM1$0$0 == 0x00db
                    00DB    305 _CCAPM1	=	0x00db
                    00FC    306 G$CCAP2H$0$0 == 0x00fc
                    00FC    307 _CCAP2H	=	0x00fc
                    00EC    308 G$CCAP2L$0$0 == 0x00ec
                    00EC    309 _CCAP2L	=	0x00ec
                    00DC    310 G$CCAPM2$0$0 == 0x00dc
                    00DC    311 _CCAPM2	=	0x00dc
                    00FD    312 G$CCAP3H$0$0 == 0x00fd
                    00FD    313 _CCAP3H	=	0x00fd
                    00ED    314 G$CCAP3L$0$0 == 0x00ed
                    00ED    315 _CCAP3L	=	0x00ed
                    00DD    316 G$CCAPM3$0$0 == 0x00dd
                    00DD    317 _CCAPM3	=	0x00dd
                    00FE    318 G$CCAP4H$0$0 == 0x00fe
                    00FE    319 _CCAP4H	=	0x00fe
                    00EE    320 G$CCAP4L$0$0 == 0x00ee
                    00EE    321 _CCAP4L	=	0x00ee
                    00DE    322 G$CCAPM4$0$0 == 0x00de
                    00DE    323 _CCAPM4	=	0x00de
                    009B    324 G$CANGIT$0$0 == 0x009b
                    009B    325 _CANGIT	=	0x009b
                    009C    326 G$CANTEC$0$0 == 0x009c
                    009C    327 _CANTEC	=	0x009c
                    009D    328 G$CANREC$0$0 == 0x009d
                    009D    329 _CANREC	=	0x009d
                    00A1    330 G$CANTCON$0$0 == 0x00a1
                    00A1    331 _CANTCON	=	0x00a1
                    00A3    332 G$CANMSG$0$0 == 0x00a3
                    00A3    333 _CANMSG	=	0x00a3
                    00A4    334 G$CANTTCL$0$0 == 0x00a4
                    00A4    335 _CANTTCL	=	0x00a4
                    00A5    336 G$CANTTCH$0$0 == 0x00a5
                    00A5    337 _CANTTCH	=	0x00a5
                    00AA    338 G$CANGSTA$0$0 == 0x00aa
                    00AA    339 _CANGSTA	=	0x00aa
                    00AB    340 G$CANGCON$0$0 == 0x00ab
                    00AB    341 _CANGCON	=	0x00ab
                    00AC    342 G$CANTIML$0$0 == 0x00ac
                    00AC    343 _CANTIML	=	0x00ac
                    00AD    344 G$CANTIMH$0$0 == 0x00ad
                    00AD    345 _CANTIMH	=	0x00ad
                    00AE    346 G$CANSTMPL$0$0 == 0x00ae
                    00AE    347 _CANSTMPL	=	0x00ae
                    00AF    348 G$CANSTMPH$0$0 == 0x00af
                    00AF    349 _CANSTMPH	=	0x00af
                    00B1    350 G$CANPAGE$0$0 == 0x00b1
                    00B1    351 _CANPAGE	=	0x00b1
                    00B2    352 G$CANSTCH$0$0 == 0x00b2
                    00B2    353 _CANSTCH	=	0x00b2
                    00B3    354 G$CANCONCH$0$0 == 0x00b3
                    00B3    355 _CANCONCH	=	0x00b3
                    00B4    356 G$CANBT1$0$0 == 0x00b4
                    00B4    357 _CANBT1	=	0x00b4
                    00B5    358 G$CANBT2$0$0 == 0x00b5
                    00B5    359 _CANBT2	=	0x00b5
                    00B6    360 G$CANBT3$0$0 == 0x00b6
                    00B6    361 _CANBT3	=	0x00b6
                    00BB    362 G$CANSIT$0$0 == 0x00bb
                    00BB    363 _CANSIT	=	0x00bb
                    00BC    364 G$CANIDT1$0$0 == 0x00bc
                    00BC    365 _CANIDT1	=	0x00bc
                    00BD    366 G$CANIDT2$0$0 == 0x00bd
                    00BD    367 _CANIDT2	=	0x00bd
                    00BE    368 G$CANIDT3$0$0 == 0x00be
                    00BE    369 _CANIDT3	=	0x00be
                    00BF    370 G$CANIDT4$0$0 == 0x00bf
                    00BF    371 _CANIDT4	=	0x00bf
                    00C1    372 G$CANGIE$0$0 == 0x00c1
                    00C1    373 _CANGIE	=	0x00c1
                    00C3    374 G$CANIE$0$0 == 0x00c3
                    00C3    375 _CANIE	=	0x00c3
                    00C4    376 G$CANIDM1$0$0 == 0x00c4
                    00C4    377 _CANIDM1	=	0x00c4
                    00C5    378 G$CANIDM2$0$0 == 0x00c5
                    00C5    379 _CANIDM2	=	0x00c5
                    00C6    380 G$CANIDM3$0$0 == 0x00c6
                    00C6    381 _CANIDM3	=	0x00c6
                    00C7    382 G$CANIDM4$0$0 == 0x00c7
                    00C7    383 _CANIDM4	=	0x00c7
                    00CF    384 G$CANEN$0$0 == 0x00cf
                    00CF    385 _CANEN	=	0x00cf
                            386 ;--------------------------------------------------------
                            387 ; special function bits
                            388 ;--------------------------------------------------------
                            389 	.area RSEG    (DATA)
                    0097    390 G$P1_7$0$0 == 0x0097
                    0097    391 _P1_7	=	0x0097
                    0096    392 G$P1_6$0$0 == 0x0096
                    0096    393 _P1_6	=	0x0096
                    0095    394 G$P1_5$0$0 == 0x0095
                    0095    395 _P1_5	=	0x0095
                    0094    396 G$P1_4$0$0 == 0x0094
                    0094    397 _P1_4	=	0x0094
                    0093    398 G$P1_3$0$0 == 0x0093
                    0093    399 _P1_3	=	0x0093
                    0092    400 G$P1_2$0$0 == 0x0092
                    0092    401 _P1_2	=	0x0092
                    0091    402 G$P1_1$0$0 == 0x0091
                    0091    403 _P1_1	=	0x0091
                    0090    404 G$P1_0$0$0 == 0x0090
                    0090    405 _P1_0	=	0x0090
                    00A1    406 G$P2_1$0$0 == 0x00a1
                    00A1    407 _P2_1	=	0x00a1
                    00A0    408 G$P2_0$0$0 == 0x00a0
                    00A0    409 _P2_0	=	0x00a0
                    00B7    410 G$P3_7$0$0 == 0x00b7
                    00B7    411 _P3_7	=	0x00b7
                    00B6    412 G$P3_6$0$0 == 0x00b6
                    00B6    413 _P3_6	=	0x00b6
                    00B5    414 G$P3_5$0$0 == 0x00b5
                    00B5    415 _P3_5	=	0x00b5
                    00B4    416 G$P3_4$0$0 == 0x00b4
                    00B4    417 _P3_4	=	0x00b4
                    00B3    418 G$P3_3$0$0 == 0x00b3
                    00B3    419 _P3_3	=	0x00b3
                    00B2    420 G$P3_2$0$0 == 0x00b2
                    00B2    421 _P3_2	=	0x00b2
                    00B1    422 G$P3_1$0$0 == 0x00b1
                    00B1    423 _P3_1	=	0x00b1
                    00B0    424 G$P3_0$0$0 == 0x00b0
                    00B0    425 _P3_0	=	0x00b0
                    00B7    426 G$RD$0$0 == 0x00b7
                    00B7    427 _RD	=	0x00b7
                    00B6    428 G$WR$0$0 == 0x00b6
                    00B6    429 _WR	=	0x00b6
                    00B5    430 G$T1$0$0 == 0x00b5
                    00B5    431 _T1	=	0x00b5
                    00B4    432 G$T0$0$0 == 0x00b4
                    00B4    433 _T0	=	0x00b4
                    00B3    434 G$INT1$0$0 == 0x00b3
                    00B3    435 _INT1	=	0x00b3
                    00B2    436 G$INT0$0$0 == 0x00b2
                    00B2    437 _INT0	=	0x00b2
                    00B1    438 G$TXD$0$0 == 0x00b1
                    00B1    439 _TXD	=	0x00b1
                    00B0    440 G$RXD$0$0 == 0x00b0
                    00B0    441 _RXD	=	0x00b0
                    00C1    442 G$P4_1$0$0 == 0x00c1
                    00C1    443 _P4_1	=	0x00c1
                    00C0    444 G$P4_0$0$0 == 0x00c0
                    00C0    445 _P4_0	=	0x00c0
                    00D7    446 G$CY$0$0 == 0x00d7
                    00D7    447 _CY	=	0x00d7
                    00D6    448 G$AC$0$0 == 0x00d6
                    00D6    449 _AC	=	0x00d6
                    00D5    450 G$F0$0$0 == 0x00d5
                    00D5    451 _F0	=	0x00d5
                    00D4    452 G$RS1$0$0 == 0x00d4
                    00D4    453 _RS1	=	0x00d4
                    00D3    454 G$RS0$0$0 == 0x00d3
                    00D3    455 _RS0	=	0x00d3
                    00D2    456 G$OV$0$0 == 0x00d2
                    00D2    457 _OV	=	0x00d2
                    00D1    458 G$UD$0$0 == 0x00d1
                    00D1    459 _UD	=	0x00d1
                    00D0    460 G$P$0$0 == 0x00d0
                    00D0    461 _P	=	0x00d0
                    008F    462 G$TF1$0$0 == 0x008f
                    008F    463 _TF1	=	0x008f
                    008E    464 G$TR1$0$0 == 0x008e
                    008E    465 _TR1	=	0x008e
                    008D    466 G$TF0$0$0 == 0x008d
                    008D    467 _TF0	=	0x008d
                    008C    468 G$TR0$0$0 == 0x008c
                    008C    469 _TR0	=	0x008c
                    008B    470 G$IE1$0$0 == 0x008b
                    008B    471 _IE1	=	0x008b
                    008A    472 G$IT1$0$0 == 0x008a
                    008A    473 _IT1	=	0x008a
                    0089    474 G$IE0$0$0 == 0x0089
                    0089    475 _IE0	=	0x0089
                    0088    476 G$IT0$0$0 == 0x0088
                    0088    477 _IT0	=	0x0088
                    00CF    478 G$TF2$0$0 == 0x00cf
                    00CF    479 _TF2	=	0x00cf
                    00CE    480 G$EXF2$0$0 == 0x00ce
                    00CE    481 _EXF2	=	0x00ce
                    00CD    482 G$RCLK$0$0 == 0x00cd
                    00CD    483 _RCLK	=	0x00cd
                    00CC    484 G$TCLK$0$0 == 0x00cc
                    00CC    485 _TCLK	=	0x00cc
                    00CB    486 G$EXEN2$0$0 == 0x00cb
                    00CB    487 _EXEN2	=	0x00cb
                    00CA    488 G$TR2$0$0 == 0x00ca
                    00CA    489 _TR2	=	0x00ca
                    00C9    490 G$C_T2$0$0 == 0x00c9
                    00C9    491 _C_T2	=	0x00c9
                    00C8    492 G$CP_RL2$0$0 == 0x00c8
                    00C8    493 _CP_RL2	=	0x00c8
                    009F    494 G$SM0$0$0 == 0x009f
                    009F    495 _SM0	=	0x009f
                    009F    496 G$FE$0$0 == 0x009f
                    009F    497 _FE	=	0x009f
                    009E    498 G$SM1$0$0 == 0x009e
                    009E    499 _SM1	=	0x009e
                    009D    500 G$SM2$0$0 == 0x009d
                    009D    501 _SM2	=	0x009d
                    009C    502 G$REN$0$0 == 0x009c
                    009C    503 _REN	=	0x009c
                    009B    504 G$TB8$0$0 == 0x009b
                    009B    505 _TB8	=	0x009b
                    009A    506 G$RB8$0$0 == 0x009a
                    009A    507 _RB8	=	0x009a
                    0099    508 G$TI$0$0 == 0x0099
                    0099    509 _TI	=	0x0099
                    0098    510 G$RI$0$0 == 0x0098
                    0098    511 _RI	=	0x0098
                    00AF    512 G$EA$0$0 == 0x00af
                    00AF    513 _EA	=	0x00af
                    00AE    514 G$EC$0$0 == 0x00ae
                    00AE    515 _EC	=	0x00ae
                    00AD    516 G$ET2$0$0 == 0x00ad
                    00AD    517 _ET2	=	0x00ad
                    00AC    518 G$ES$0$0 == 0x00ac
                    00AC    519 _ES	=	0x00ac
                    00AB    520 G$ET1$0$0 == 0x00ab
                    00AB    521 _ET1	=	0x00ab
                    00AA    522 G$EX1$0$0 == 0x00aa
                    00AA    523 _EX1	=	0x00aa
                    00A9    524 G$ET0$0$0 == 0x00a9
                    00A9    525 _ET0	=	0x00a9
                    00A8    526 G$EX0$0$0 == 0x00a8
                    00A8    527 _EX0	=	0x00a8
                    00EA    528 G$ETIM$0$0 == 0x00ea
                    00EA    529 _ETIM	=	0x00ea
                    00E9    530 G$EADC$0$0 == 0x00e9
                    00E9    531 _EADC	=	0x00e9
                    00E8    532 G$ECAN$0$0 == 0x00e8
                    00E8    533 _ECAN	=	0x00e8
                    00DF    534 G$CF$0$0 == 0x00df
                    00DF    535 _CF	=	0x00df
                    00DE    536 G$CR$0$0 == 0x00de
                    00DE    537 _CR	=	0x00de
                    00DC    538 G$CCF4$0$0 == 0x00dc
                    00DC    539 _CCF4	=	0x00dc
                    00DB    540 G$CCF3$0$0 == 0x00db
                    00DB    541 _CCF3	=	0x00db
                    00DA    542 G$CCF2$0$0 == 0x00da
                    00DA    543 _CCF2	=	0x00da
                    00D9    544 G$CCF1$0$0 == 0x00d9
                    00D9    545 _CCF1	=	0x00d9
                    00D8    546 G$CCF0$0$0 == 0x00d8
                    00D8    547 _CCF0	=	0x00d8
                            548 ;--------------------------------------------------------
                            549 ; overlayable register banks
                            550 ;--------------------------------------------------------
                            551 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     552 	.ds 8
                            553 ;--------------------------------------------------------
                            554 ; internal ram data
                            555 ;--------------------------------------------------------
                            556 	.area DSEG    (DATA)
                            557 ;--------------------------------------------------------
                            558 ; overlayable items in internal ram 
                            559 ;--------------------------------------------------------
                            560 	.area	OSEG    (OVR,DATA)
                            561 	.area	OSEG    (OVR,DATA)
                            562 	.area	OSEG    (OVR,DATA)
                            563 	.area	OSEG    (OVR,DATA)
                            564 ;--------------------------------------------------------
                            565 ; indirectly addressable internal ram data
                            566 ;--------------------------------------------------------
                            567 	.area ISEG    (DATA)
                            568 ;--------------------------------------------------------
                            569 ; absolute internal ram data
                            570 ;--------------------------------------------------------
                            571 	.area IABS    (ABS,DATA)
                            572 	.area IABS    (ABS,DATA)
                            573 ;--------------------------------------------------------
                            574 ; bit data
                            575 ;--------------------------------------------------------
                            576 	.area BSEG    (BIT)
                            577 ;--------------------------------------------------------
                            578 ; paged external ram data
                            579 ;--------------------------------------------------------
                            580 	.area PSEG    (PAG,XDATA)
                            581 ;--------------------------------------------------------
                            582 ; external ram data
                            583 ;--------------------------------------------------------
                            584 	.area XSEG    (XDATA)
                            585 ;--------------------------------------------------------
                            586 ; absolute external ram data
                            587 ;--------------------------------------------------------
                            588 	.area XABS    (ABS,XDATA)
                            589 ;--------------------------------------------------------
                            590 ; external initialized ram data
                            591 ;--------------------------------------------------------
                            592 	.area XISEG   (XDATA)
                            593 	.area HOME    (CODE)
                            594 	.area GSINIT0 (CODE)
                            595 	.area GSINIT1 (CODE)
                            596 	.area GSINIT2 (CODE)
                            597 	.area GSINIT3 (CODE)
                            598 	.area GSINIT4 (CODE)
                            599 	.area GSINIT5 (CODE)
                            600 	.area GSINIT  (CODE)
                            601 	.area GSFINAL (CODE)
                            602 	.area CSEG    (CODE)
                            603 ;--------------------------------------------------------
                            604 ; global & static initialisations
                            605 ;--------------------------------------------------------
                            606 	.area HOME    (CODE)
                            607 	.area GSINIT  (CODE)
                            608 	.area GSFINAL (CODE)
                            609 	.area GSINIT  (CODE)
                            610 ;--------------------------------------------------------
                            611 ; Home
                            612 ;--------------------------------------------------------
                            613 	.area HOME    (CODE)
                            614 	.area HOME    (CODE)
                            615 ;--------------------------------------------------------
                            616 ; code
                            617 ;--------------------------------------------------------
                            618 	.area CSEG    (CODE)
                            619 ;------------------------------------------------------------
                            620 ;Allocation info for local variables in function 'AdcInit'
                            621 ;------------------------------------------------------------
                            622 ;eAdcInput                 Allocated to registers r2 
                            623 ;u8AdcPrescaler            Allocated to registers r3 
                            624 ;------------------------------------------------------------
                    0000    625 	G$AdcInit$0$0 ==.
                    0000    626 	C$adc.c$25$0$0 ==.
                            627 ;	adc.c:25: void AdcInit(TAdcInput eAdcInput)
                            628 ;	-----------------------------------------
                            629 ;	 function AdcInit
                            630 ;	-----------------------------------------
   0000                     631 _AdcInit:
                    0002    632 	ar2 = 0x02
                    0003    633 	ar3 = 0x03
                    0004    634 	ar4 = 0x04
                    0005    635 	ar5 = 0x05
                    0006    636 	ar6 = 0x06
                    0007    637 	ar7 = 0x07
                    0000    638 	ar0 = 0x00
                    0001    639 	ar1 = 0x01
   0000 AA 82               640 	mov	r2,dpl
                    0002    641 	C$adc.c$30$1$1 ==.
                            642 ;	adc.c:30: u8AdcPrescaler = (__u8) (SysGetQuarzFreq() / (2800000));
   0002 C0 02               643 	push	ar2
   0004 12s00r00            644 	lcall	_SysGetQuarzFreq
   0007 75*00 80            645 	mov	__divulong_PARM_2,#0x80
   000A 75*01 B9            646 	mov	(__divulong_PARM_2 + 1),#0xB9
   000D 75*02 2A            647 	mov	(__divulong_PARM_2 + 2),#0x2A
   0010 75*03 00            648 	mov	(__divulong_PARM_2 + 3),#0x00
   0013 12s00r00            649 	lcall	__divulong
   0016 AB 82               650 	mov	r3,dpl
                    0018    651 	C$adc.c$31$1$1 ==.
                            652 ;	adc.c:31: u8AdcPrescaler <<= SysGetX2Mode();
   0018 C0 03               653 	push	ar3
   001A 12s00r00            654 	lcall	_SysGetX2Mode
   001D AC 82               655 	mov	r4,dpl
   001F D0 03               656 	pop	ar3
   0021 D0 02               657 	pop	ar2
   0023 8C F0               658 	mov	b,r4
   0025 05 F0               659 	inc	b
   0027 EB                  660 	mov	a,r3
   0028 80 02               661 	sjmp	00109$
   002A                     662 00107$:
   002A 25 E0               663 	add	a,acc
   002C                     664 00109$:
   002C D5 F0 FB            665 	djnz	b,00107$
   002F FB                  666 	mov	r3,a
                    0030    667 	C$adc.c$33$1$1 ==.
                            668 ;	adc.c:33: if (u8AdcPrescaler < 32)
   0030 BB 20 00            669 	cjne	r3,#0x20,00110$
   0033                     670 00110$:
   0033 50 07               671 	jnc	00102$
                    0035    672 	C$adc.c$35$2$2 ==.
                            673 ;	adc.c:35: ADCLK = (u8AdcPrescaler & 0x1F);
   0035 74 1F               674 	mov	a,#0x1F
   0037 5B                  675 	anl	a,r3
   0038 F5 F2               676 	mov	_ADCLK,a
   003A 80 03               677 	sjmp	00103$
   003C                     678 00102$:
                    003C    679 	C$adc.c$39$2$3 ==.
                            680 ;	adc.c:39: ADCLK = 0;
   003C 75 F2 00            681 	mov	_ADCLK,#0x00
   003F                     682 00103$:
                    003F    683 	C$adc.c$41$1$1 ==.
                            684 ;	adc.c:41: ADCF = (__u8) eAdcInput;
   003F 8A F6               685 	mov	_ADCF,r2
                    0041    686 	C$adc.c$42$1$1 ==.
                            687 ;	adc.c:42: ADCON |= 0x20;
   0041 43 F3 20            688 	orl	_ADCON,#0x20
                    0044    689 	C$adc.c$43$1$1 ==.
                    0044    690 	XG$AdcInit$0$0 ==.
   0044 22                  691 	ret
                            692 ;------------------------------------------------------------
                            693 ;Allocation info for local variables in function 'AdcSetChannels'
                            694 ;------------------------------------------------------------
                            695 ;eAdcInput                 Allocated to registers r2 
                            696 ;------------------------------------------------------------
                    0045    697 	G$AdcSetChannels$0$0 ==.
                    0045    698 	C$adc.c$50$1$1 ==.
                            699 ;	adc.c:50: void AdcSetChannels(TAdcInput eAdcInput)
                            700 ;	-----------------------------------------
                            701 ;	 function AdcSetChannels
                            702 ;	-----------------------------------------
   0045                     703 _AdcSetChannels:
                    0045    704 	C$adc.c$52$1$1 ==.
                            705 ;	adc.c:52: ADCF |= (__u8) eAdcInput;
   0045 E5 82               706 	mov	a,dpl
   0047 42 F6               707 	orl	_ADCF,a
                    0049    708 	C$adc.c$53$1$1 ==.
                    0049    709 	XG$AdcSetChannels$0$0 ==.
   0049 22                  710 	ret
                            711 ;------------------------------------------------------------
                            712 ;Allocation info for local variables in function 'AdcClearChannels'
                            713 ;------------------------------------------------------------
                            714 ;eAdcInput                 Allocated to registers r2 
                            715 ;------------------------------------------------------------
                    004A    716 	G$AdcClearChannels$0$0 ==.
                    004A    717 	C$adc.c$60$1$1 ==.
                            718 ;	adc.c:60: void AdcClearChannels(TAdcInput eAdcInput)
                            719 ;	-----------------------------------------
                            720 ;	 function AdcClearChannels
                            721 ;	-----------------------------------------
   004A                     722 _AdcClearChannels:
                    004A    723 	C$adc.c$62$1$1 ==.
                            724 ;	adc.c:62: ADCF &= (__u8) ~eAdcInput;
   004A E5 82               725 	mov	a,dpl
   004C F4                  726 	cpl	a
   004D 52 F6               727 	anl	_ADCF,a
                    004F    728 	C$adc.c$63$1$1 ==.
                    004F    729 	XG$AdcClearChannels$0$0 ==.
   004F 22                  730 	ret
                            731 ;------------------------------------------------------------
                            732 ;Allocation info for local variables in function 'Adc10BitConversion'
                            733 ;------------------------------------------------------------
                            734 ;eAdcChannel               Allocated to registers r2 
                            735 ;u16AdcWert                Allocated to registers r3 r4 
                            736 ;------------------------------------------------------------
                    0050    737 	G$Adc10BitConversion$0$0 ==.
                    0050    738 	C$adc.c$76$1$1 ==.
                            739 ;	adc.c:76: __u16 Adc10BitConversion(TAdcChannel eAdcChannel)
                            740 ;	-----------------------------------------
                            741 ;	 function Adc10BitConversion
                            742 ;	-----------------------------------------
   0050                     743 _Adc10BitConversion:
   0050 AA 82               744 	mov	r2,dpl
                    0052    745 	C$adc.c$78$1$1 ==.
                            746 ;	adc.c:78: __u16 u16AdcWert = 0;
   0052 7B 00               747 	mov	r3,#0x00
   0054 7C 00               748 	mov	r4,#0x00
                    0056    749 	C$adc.c$81$1$1 ==.
                            750 ;	adc.c:81: eAdcChannel &= 0x07;
   0056 53 02 07            751 	anl	ar2,#0x07
                    0059    752 	C$adc.c$82$1$1 ==.
                            753 ;	adc.c:82: if (AdcGetActiveChannels() & (1<<eAdcChannel))
   0059 8A F0               754 	mov	b,r2
   005B 05 F0               755 	inc	b
   005D 7D 01               756 	mov	r5,#0x01
   005F 7E 00               757 	mov	r6,#0x00
   0061 80 06               758 	sjmp	00114$
   0063                     759 00113$:
   0063 ED                  760 	mov	a,r5
   0064 2D                  761 	add	a,r5
   0065 FD                  762 	mov	r5,a
   0066 EE                  763 	mov	a,r6
   0067 33                  764 	rlc	a
   0068 FE                  765 	mov	r6,a
   0069                     766 00114$:
   0069 D5 F0 F7            767 	djnz	b,00113$
   006C AF F6               768 	mov	r7,_ADCF
   006E 78 00               769 	mov	r0,#0x00
   0070 EF                  770 	mov	a,r7
   0071 52 05               771 	anl	ar5,a
   0073 E8                  772 	mov	a,r0
   0074 52 06               773 	anl	ar6,a
   0076 ED                  774 	mov	a,r5
   0077 4E                  775 	orl	a,r6
   0078 60 2C               776 	jz	00107$
                    007A    777 	C$adc.c$85$2$2 ==.
                            778 ;	adc.c:85: ADCON = 0x60;
   007A 75 F3 60            779 	mov	_ADCON,#0x60
                    007D    780 	C$adc.c$86$2$2 ==.
                            781 ;	adc.c:86: ADCON |= (eAdcChannel);
   007D EA                  782 	mov	a,r2
   007E 42 F3               783 	orl	_ADCON,a
                    0080    784 	C$adc.c$88$2$2 ==.
                            785 ;	adc.c:88: ADCON |= 0x08;
   0080 43 F3 08            786 	orl	_ADCON,#0x08
                    0083    787 	C$adc.c$90$2$2 ==.
                            788 ;	adc.c:90: while(1)
   0083                     789 00104$:
                    0083    790 	C$adc.c$92$3$3 ==.
                            791 ;	adc.c:92: if ((ADCON & 0x18) == 0x10)
   0083 74 18               792 	mov	a,#0x18
   0085 55 F3               793 	anl	a,_ADCON
   0087 FA                  794 	mov	r2,a
   0088 BA 10 F8            795 	cjne	r2,#0x10,00104$
                    008B    796 	C$adc.c$98$2$2 ==.
                            797 ;	adc.c:98: ADCON &= ~0x40;
   008B 53 F3 BF            798 	anl	_ADCON,#0xBF
                    008E    799 	C$adc.c$100$2$2 ==.
                            800 ;	adc.c:100: u16AdcWert = AdcGet10BitValue();
   008E AA F5               801 	mov	r2,_ADDH
   0090 E4                  802 	clr	a
   0091 CA                  803 	xch	a,r2
   0092 25 E0               804 	add	a,acc
   0094 CA                  805 	xch	a,r2
   0095 33                  806 	rlc	a
   0096 CA                  807 	xch	a,r2
   0097 25 E0               808 	add	a,acc
   0099 CA                  809 	xch	a,r2
   009A 33                  810 	rlc	a
   009B FD                  811 	mov	r5,a
   009C AE F4               812 	mov	r6,_ADDL
   009E 7F 00               813 	mov	r7,#0x00
   00A0 EE                  814 	mov	a,r6
   00A1 4A                  815 	orl	a,r2
   00A2 FB                  816 	mov	r3,a
   00A3 EF                  817 	mov	a,r7
   00A4 4D                  818 	orl	a,r5
   00A5 FC                  819 	mov	r4,a
   00A6                     820 00107$:
                    00A6    821 	C$adc.c$102$1$1 ==.
                            822 ;	adc.c:102: return u16AdcWert;
   00A6 8B 82               823 	mov	dpl,r3
   00A8 8C 83               824 	mov	dph,r4
                    00AA    825 	C$adc.c$103$1$1 ==.
                    00AA    826 	XG$Adc10BitConversion$0$0 ==.
   00AA 22                  827 	ret
                            828 ;------------------------------------------------------------
                            829 ;Allocation info for local variables in function 'AdcStart10BitConversion'
                            830 ;------------------------------------------------------------
                            831 ;eAdcChannel               Allocated to registers r2 
                            832 ;------------------------------------------------------------
                    00AB    833 	G$AdcStart10BitConversion$0$0 ==.
                    00AB    834 	C$adc.c$114$1$1 ==.
                            835 ;	adc.c:114: void AdcStart10BitConversion(TAdcChannel eAdcChannel)
                            836 ;	-----------------------------------------
                            837 ;	 function AdcStart10BitConversion
                            838 ;	-----------------------------------------
   00AB                     839 _AdcStart10BitConversion:
   00AB AA 82               840 	mov	r2,dpl
                    00AD    841 	C$adc.c$117$1$1 ==.
                            842 ;	adc.c:117: eAdcChannel &= 0x07;
   00AD 53 02 07            843 	anl	ar2,#0x07
                    00B0    844 	C$adc.c$118$1$1 ==.
                            845 ;	adc.c:118: if (AdcGetActiveChannels() & (1<<eAdcChannel))
   00B0 8A F0               846 	mov	b,r2
   00B2 05 F0               847 	inc	b
   00B4 7B 01               848 	mov	r3,#0x01
   00B6 7C 00               849 	mov	r4,#0x00
   00B8 80 06               850 	sjmp	00107$
   00BA                     851 00106$:
   00BA EB                  852 	mov	a,r3
   00BB 2B                  853 	add	a,r3
   00BC FB                  854 	mov	r3,a
   00BD EC                  855 	mov	a,r4
   00BE 33                  856 	rlc	a
   00BF FC                  857 	mov	r4,a
   00C0                     858 00107$:
   00C0 D5 F0 F7            859 	djnz	b,00106$
   00C3 AD F6               860 	mov	r5,_ADCF
   00C5 7E 00               861 	mov	r6,#0x00
   00C7 ED                  862 	mov	a,r5
   00C8 52 03               863 	anl	ar3,a
   00CA EE                  864 	mov	a,r6
   00CB 52 04               865 	anl	ar4,a
   00CD EB                  866 	mov	a,r3
   00CE 4C                  867 	orl	a,r4
   00CF 60 09               868 	jz	00103$
                    00D1    869 	C$adc.c$121$2$2 ==.
                            870 ;	adc.c:121: ADCON = 0x60;
   00D1 75 F3 60            871 	mov	_ADCON,#0x60
                    00D4    872 	C$adc.c$122$2$2 ==.
                            873 ;	adc.c:122: ADCON |= (eAdcChannel);
   00D4 EA                  874 	mov	a,r2
   00D5 42 F3               875 	orl	_ADCON,a
                    00D7    876 	C$adc.c$124$2$2 ==.
                            877 ;	adc.c:124: ADCON |= 0x08;
   00D7 43 F3 08            878 	orl	_ADCON,#0x08
   00DA                     879 00103$:
                    00DA    880 	C$adc.c$126$2$1 ==.
                    00DA    881 	XG$AdcStart10BitConversion$0$0 ==.
   00DA 22                  882 	ret
                            883 ;------------------------------------------------------------
                            884 ;Allocation info for local variables in function 'AdcConversionReady'
                            885 ;------------------------------------------------------------
                            886 ;------------------------------------------------------------
                    00DB    887 	G$AdcConversionReady$0$0 ==.
                    00DB    888 	C$adc.c$137$2$1 ==.
                            889 ;	adc.c:137: __u8 AdcConversionReady(void)
                            890 ;	-----------------------------------------
                            891 ;	 function AdcConversionReady
                            892 ;	-----------------------------------------
   00DB                     893 _AdcConversionReady:
                    00DB    894 	C$adc.c$139$1$1 ==.
                            895 ;	adc.c:139: if ((ADCON & 0x18) == 0x10)
   00DB 74 18               896 	mov	a,#0x18
   00DD 55 F3               897 	anl	a,_ADCON
   00DF FA                  898 	mov	r2,a
   00E0 BA 10 04            899 	cjne	r2,#0x10,00102$
                    00E3    900 	C$adc.c$141$2$2 ==.
                            901 ;	adc.c:141: return 0;
   00E3 75 82 00            902 	mov	dpl,#0x00
                    00E6    903 	C$adc.c$145$2$3 ==.
                            904 ;	adc.c:145: return 1;
                    00E6    905 	C$adc.c$147$1$1 ==.
                    00E6    906 	XG$AdcConversionReady$0$0 ==.
   00E6 22                  907 	ret
   00E7                     908 00102$:
   00E7 75 82 01            909 	mov	dpl,#0x01
   00EA 22                  910 	ret
                            911 	.area CSEG    (CODE)
                            912 	.area CONST   (CODE)
                            913 	.area XINIT   (CODE)
                            914 	.area CABS    (ABS,CODE)
