                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Feb  3 2010) (UNIX)
                              4 ; This file was generated Sun Feb 20 14:49:26 2011
                              5 ;--------------------------------------------------------
                              6 	.module timer1
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _Tmr1Init_PARM_2
                             13 	.globl _CCF0
                             14 	.globl _CCF1
                             15 	.globl _CCF2
                             16 	.globl _CCF3
                             17 	.globl _CCF4
                             18 	.globl _CR
                             19 	.globl _CF
                             20 	.globl _ECAN
                             21 	.globl _EADC
                             22 	.globl _ETIM
                             23 	.globl _EX0
                             24 	.globl _ET0
                             25 	.globl _EX1
                             26 	.globl _ET1
                             27 	.globl _ES
                             28 	.globl _ET2
                             29 	.globl _EC
                             30 	.globl _EA
                             31 	.globl _RI
                             32 	.globl _TI
                             33 	.globl _RB8
                             34 	.globl _TB8
                             35 	.globl _REN
                             36 	.globl _SM2
                             37 	.globl _SM1
                             38 	.globl _FE
                             39 	.globl _SM0
                             40 	.globl _CP_RL2
                             41 	.globl _C_T2
                             42 	.globl _TR2
                             43 	.globl _EXEN2
                             44 	.globl _TCLK
                             45 	.globl _RCLK
                             46 	.globl _EXF2
                             47 	.globl _TF2
                             48 	.globl _IT0
                             49 	.globl _IE0
                             50 	.globl _IT1
                             51 	.globl _IE1
                             52 	.globl _TR0
                             53 	.globl _TF0
                             54 	.globl _TR1
                             55 	.globl _TF1
                             56 	.globl _P
                             57 	.globl _UD
                             58 	.globl _OV
                             59 	.globl _RS0
                             60 	.globl _RS1
                             61 	.globl _F0
                             62 	.globl _AC
                             63 	.globl _CY
                             64 	.globl _P4_0
                             65 	.globl _P4_1
                             66 	.globl _RXD
                             67 	.globl _TXD
                             68 	.globl _INT0
                             69 	.globl _INT1
                             70 	.globl _T0
                             71 	.globl _T1
                             72 	.globl _WR
                             73 	.globl _RD
                             74 	.globl _P3_0
                             75 	.globl _P3_1
                             76 	.globl _P3_2
                             77 	.globl _P3_3
                             78 	.globl _P3_4
                             79 	.globl _P3_5
                             80 	.globl _P3_6
                             81 	.globl _P3_7
                             82 	.globl _P2_0
                             83 	.globl _P2_1
                             84 	.globl _P1_0
                             85 	.globl _P1_1
                             86 	.globl _P1_2
                             87 	.globl _P1_3
                             88 	.globl _P1_4
                             89 	.globl _P1_5
                             90 	.globl _P1_6
                             91 	.globl _P1_7
                             92 	.globl _CANEN
                             93 	.globl _CANIDM4
                             94 	.globl _CANIDM3
                             95 	.globl _CANIDM2
                             96 	.globl _CANIDM1
                             97 	.globl _CANIE
                             98 	.globl _CANGIE
                             99 	.globl _CANIDT4
                            100 	.globl _CANIDT3
                            101 	.globl _CANIDT2
                            102 	.globl _CANIDT1
                            103 	.globl _CANSIT
                            104 	.globl _CANBT3
                            105 	.globl _CANBT2
                            106 	.globl _CANBT1
                            107 	.globl _CANCONCH
                            108 	.globl _CANSTCH
                            109 	.globl _CANPAGE
                            110 	.globl _CANSTMPH
                            111 	.globl _CANSTMPL
                            112 	.globl _CANTIMH
                            113 	.globl _CANTIML
                            114 	.globl _CANGCON
                            115 	.globl _CANGSTA
                            116 	.globl _CANTTCH
                            117 	.globl _CANTTCL
                            118 	.globl _CANMSG
                            119 	.globl _CANTCON
                            120 	.globl _CANREC
                            121 	.globl _CANTEC
                            122 	.globl _CANGIT
                            123 	.globl _CCAPM4
                            124 	.globl _CCAP4L
                            125 	.globl _CCAP4H
                            126 	.globl _CCAPM3
                            127 	.globl _CCAP3L
                            128 	.globl _CCAP3H
                            129 	.globl _CCAPM2
                            130 	.globl _CCAP2L
                            131 	.globl _CCAP2H
                            132 	.globl _CCAPM1
                            133 	.globl _CCAP1L
                            134 	.globl _CCAP1H
                            135 	.globl _CCAPM0
                            136 	.globl _CCAP0L
                            137 	.globl _CCAP0H
                            138 	.globl _CL
                            139 	.globl _CH
                            140 	.globl _CMOD
                            141 	.globl _CCON
                            142 	.globl _IEN1
                            143 	.globl _IPH0
                            144 	.globl _IPL0
                            145 	.globl _IEN0
                            146 	.globl _IPH1
                            147 	.globl _IPL1
                            148 	.globl _AUXR1
                            149 	.globl _AUXR
                            150 	.globl _EECON
                            151 	.globl _FCON
                            152 	.globl _ADCF
                            153 	.globl _ADDH
                            154 	.globl _ADDL
                            155 	.globl _ADCON
                            156 	.globl _ADCLK
                            157 	.globl _SADDR
                            158 	.globl _SADEN
                            159 	.globl _SBUF
                            160 	.globl _SCON
                            161 	.globl _WDTPRG
                            162 	.globl _WDTRST
                            163 	.globl _RCAP2H
                            164 	.globl _RCAP2L
                            165 	.globl _TH2
                            166 	.globl _TH1
                            167 	.globl _TH0
                            168 	.globl _TL2
                            169 	.globl _TL1
                            170 	.globl _TL0
                            171 	.globl _T2MOD
                            172 	.globl _T2CON
                            173 	.globl _TMOD
                            174 	.globl _TCON
                            175 	.globl _CKCON
                            176 	.globl _PCON
                            177 	.globl _DPH
                            178 	.globl _DPL
                            179 	.globl _SP
                            180 	.globl _B
                            181 	.globl _ACC
                            182 	.globl _PSW
                            183 	.globl _P4
                            184 	.globl _P3
                            185 	.globl _P2
                            186 	.globl _P1
                            187 	.globl _Tmr1UsrIsrFnc
                            188 	.globl _u32Tmr1TmpReload
                            189 	.globl _u32Tmr1Reload
                            190 	.globl _Tmr1Init
                            191 	.globl _Tmr1SetTime
                            192 	.globl _Tmr1SetValue
                            193 	.globl _Tmr1GetValue
                            194 	.globl _Tmr1IsrFnc
                            195 ;--------------------------------------------------------
                            196 ; special function registers
                            197 ;--------------------------------------------------------
                            198 	.area RSEG    (DATA)
                    0090    199 G$P1$0$0 == 0x0090
                    0090    200 _P1	=	0x0090
                    00A0    201 G$P2$0$0 == 0x00a0
                    00A0    202 _P2	=	0x00a0
                    00B0    203 G$P3$0$0 == 0x00b0
                    00B0    204 _P3	=	0x00b0
                    00C0    205 G$P4$0$0 == 0x00c0
                    00C0    206 _P4	=	0x00c0
                    00D0    207 G$PSW$0$0 == 0x00d0
                    00D0    208 _PSW	=	0x00d0
                    00E0    209 G$ACC$0$0 == 0x00e0
                    00E0    210 _ACC	=	0x00e0
                    00F0    211 G$B$0$0 == 0x00f0
                    00F0    212 _B	=	0x00f0
                    0081    213 G$SP$0$0 == 0x0081
                    0081    214 _SP	=	0x0081
                    0082    215 G$DPL$0$0 == 0x0082
                    0082    216 _DPL	=	0x0082
                    0083    217 G$DPH$0$0 == 0x0083
                    0083    218 _DPH	=	0x0083
                    0087    219 G$PCON$0$0 == 0x0087
                    0087    220 _PCON	=	0x0087
                    008F    221 G$CKCON$0$0 == 0x008f
                    008F    222 _CKCON	=	0x008f
                    0088    223 G$TCON$0$0 == 0x0088
                    0088    224 _TCON	=	0x0088
                    0089    225 G$TMOD$0$0 == 0x0089
                    0089    226 _TMOD	=	0x0089
                    00C8    227 G$T2CON$0$0 == 0x00c8
                    00C8    228 _T2CON	=	0x00c8
                    00C9    229 G$T2MOD$0$0 == 0x00c9
                    00C9    230 _T2MOD	=	0x00c9
                    008A    231 G$TL0$0$0 == 0x008a
                    008A    232 _TL0	=	0x008a
                    008B    233 G$TL1$0$0 == 0x008b
                    008B    234 _TL1	=	0x008b
                    00CC    235 G$TL2$0$0 == 0x00cc
                    00CC    236 _TL2	=	0x00cc
                    008C    237 G$TH0$0$0 == 0x008c
                    008C    238 _TH0	=	0x008c
                    008D    239 G$TH1$0$0 == 0x008d
                    008D    240 _TH1	=	0x008d
                    00CD    241 G$TH2$0$0 == 0x00cd
                    00CD    242 _TH2	=	0x00cd
                    00CA    243 G$RCAP2L$0$0 == 0x00ca
                    00CA    244 _RCAP2L	=	0x00ca
                    00CB    245 G$RCAP2H$0$0 == 0x00cb
                    00CB    246 _RCAP2H	=	0x00cb
                    00A6    247 G$WDTRST$0$0 == 0x00a6
                    00A6    248 _WDTRST	=	0x00a6
                    00A7    249 G$WDTPRG$0$0 == 0x00a7
                    00A7    250 _WDTPRG	=	0x00a7
                    0098    251 G$SCON$0$0 == 0x0098
                    0098    252 _SCON	=	0x0098
                    0099    253 G$SBUF$0$0 == 0x0099
                    0099    254 _SBUF	=	0x0099
                    00B9    255 G$SADEN$0$0 == 0x00b9
                    00B9    256 _SADEN	=	0x00b9
                    00A9    257 G$SADDR$0$0 == 0x00a9
                    00A9    258 _SADDR	=	0x00a9
                    00F2    259 G$ADCLK$0$0 == 0x00f2
                    00F2    260 _ADCLK	=	0x00f2
                    00F3    261 G$ADCON$0$0 == 0x00f3
                    00F3    262 _ADCON	=	0x00f3
                    00F4    263 G$ADDL$0$0 == 0x00f4
                    00F4    264 _ADDL	=	0x00f4
                    00F5    265 G$ADDH$0$0 == 0x00f5
                    00F5    266 _ADDH	=	0x00f5
                    00F6    267 G$ADCF$0$0 == 0x00f6
                    00F6    268 _ADCF	=	0x00f6
                    00D1    269 G$FCON$0$0 == 0x00d1
                    00D1    270 _FCON	=	0x00d1
                    00D2    271 G$EECON$0$0 == 0x00d2
                    00D2    272 _EECON	=	0x00d2
                    008E    273 G$AUXR$0$0 == 0x008e
                    008E    274 _AUXR	=	0x008e
                    00A2    275 G$AUXR1$0$0 == 0x00a2
                    00A2    276 _AUXR1	=	0x00a2
                    00F8    277 G$IPL1$0$0 == 0x00f8
                    00F8    278 _IPL1	=	0x00f8
                    00F7    279 G$IPH1$0$0 == 0x00f7
                    00F7    280 _IPH1	=	0x00f7
                    00A8    281 G$IEN0$0$0 == 0x00a8
                    00A8    282 _IEN0	=	0x00a8
                    00B8    283 G$IPL0$0$0 == 0x00b8
                    00B8    284 _IPL0	=	0x00b8
                    00B7    285 G$IPH0$0$0 == 0x00b7
                    00B7    286 _IPH0	=	0x00b7
                    00E8    287 G$IEN1$0$0 == 0x00e8
                    00E8    288 _IEN1	=	0x00e8
                    00D8    289 G$CCON$0$0 == 0x00d8
                    00D8    290 _CCON	=	0x00d8
                    00D9    291 G$CMOD$0$0 == 0x00d9
                    00D9    292 _CMOD	=	0x00d9
                    00F9    293 G$CH$0$0 == 0x00f9
                    00F9    294 _CH	=	0x00f9
                    00E9    295 G$CL$0$0 == 0x00e9
                    00E9    296 _CL	=	0x00e9
                    00FA    297 G$CCAP0H$0$0 == 0x00fa
                    00FA    298 _CCAP0H	=	0x00fa
                    00EA    299 G$CCAP0L$0$0 == 0x00ea
                    00EA    300 _CCAP0L	=	0x00ea
                    00DA    301 G$CCAPM0$0$0 == 0x00da
                    00DA    302 _CCAPM0	=	0x00da
                    00FB    303 G$CCAP1H$0$0 == 0x00fb
                    00FB    304 _CCAP1H	=	0x00fb
                    00EB    305 G$CCAP1L$0$0 == 0x00eb
                    00EB    306 _CCAP1L	=	0x00eb
                    00DB    307 G$CCAPM1$0$0 == 0x00db
                    00DB    308 _CCAPM1	=	0x00db
                    00FC    309 G$CCAP2H$0$0 == 0x00fc
                    00FC    310 _CCAP2H	=	0x00fc
                    00EC    311 G$CCAP2L$0$0 == 0x00ec
                    00EC    312 _CCAP2L	=	0x00ec
                    00DC    313 G$CCAPM2$0$0 == 0x00dc
                    00DC    314 _CCAPM2	=	0x00dc
                    00FD    315 G$CCAP3H$0$0 == 0x00fd
                    00FD    316 _CCAP3H	=	0x00fd
                    00ED    317 G$CCAP3L$0$0 == 0x00ed
                    00ED    318 _CCAP3L	=	0x00ed
                    00DD    319 G$CCAPM3$0$0 == 0x00dd
                    00DD    320 _CCAPM3	=	0x00dd
                    00FE    321 G$CCAP4H$0$0 == 0x00fe
                    00FE    322 _CCAP4H	=	0x00fe
                    00EE    323 G$CCAP4L$0$0 == 0x00ee
                    00EE    324 _CCAP4L	=	0x00ee
                    00DE    325 G$CCAPM4$0$0 == 0x00de
                    00DE    326 _CCAPM4	=	0x00de
                    009B    327 G$CANGIT$0$0 == 0x009b
                    009B    328 _CANGIT	=	0x009b
                    009C    329 G$CANTEC$0$0 == 0x009c
                    009C    330 _CANTEC	=	0x009c
                    009D    331 G$CANREC$0$0 == 0x009d
                    009D    332 _CANREC	=	0x009d
                    00A1    333 G$CANTCON$0$0 == 0x00a1
                    00A1    334 _CANTCON	=	0x00a1
                    00A3    335 G$CANMSG$0$0 == 0x00a3
                    00A3    336 _CANMSG	=	0x00a3
                    00A4    337 G$CANTTCL$0$0 == 0x00a4
                    00A4    338 _CANTTCL	=	0x00a4
                    00A5    339 G$CANTTCH$0$0 == 0x00a5
                    00A5    340 _CANTTCH	=	0x00a5
                    00AA    341 G$CANGSTA$0$0 == 0x00aa
                    00AA    342 _CANGSTA	=	0x00aa
                    00AB    343 G$CANGCON$0$0 == 0x00ab
                    00AB    344 _CANGCON	=	0x00ab
                    00AC    345 G$CANTIML$0$0 == 0x00ac
                    00AC    346 _CANTIML	=	0x00ac
                    00AD    347 G$CANTIMH$0$0 == 0x00ad
                    00AD    348 _CANTIMH	=	0x00ad
                    00AE    349 G$CANSTMPL$0$0 == 0x00ae
                    00AE    350 _CANSTMPL	=	0x00ae
                    00AF    351 G$CANSTMPH$0$0 == 0x00af
                    00AF    352 _CANSTMPH	=	0x00af
                    00B1    353 G$CANPAGE$0$0 == 0x00b1
                    00B1    354 _CANPAGE	=	0x00b1
                    00B2    355 G$CANSTCH$0$0 == 0x00b2
                    00B2    356 _CANSTCH	=	0x00b2
                    00B3    357 G$CANCONCH$0$0 == 0x00b3
                    00B3    358 _CANCONCH	=	0x00b3
                    00B4    359 G$CANBT1$0$0 == 0x00b4
                    00B4    360 _CANBT1	=	0x00b4
                    00B5    361 G$CANBT2$0$0 == 0x00b5
                    00B5    362 _CANBT2	=	0x00b5
                    00B6    363 G$CANBT3$0$0 == 0x00b6
                    00B6    364 _CANBT3	=	0x00b6
                    00BB    365 G$CANSIT$0$0 == 0x00bb
                    00BB    366 _CANSIT	=	0x00bb
                    00BC    367 G$CANIDT1$0$0 == 0x00bc
                    00BC    368 _CANIDT1	=	0x00bc
                    00BD    369 G$CANIDT2$0$0 == 0x00bd
                    00BD    370 _CANIDT2	=	0x00bd
                    00BE    371 G$CANIDT3$0$0 == 0x00be
                    00BE    372 _CANIDT3	=	0x00be
                    00BF    373 G$CANIDT4$0$0 == 0x00bf
                    00BF    374 _CANIDT4	=	0x00bf
                    00C1    375 G$CANGIE$0$0 == 0x00c1
                    00C1    376 _CANGIE	=	0x00c1
                    00C3    377 G$CANIE$0$0 == 0x00c3
                    00C3    378 _CANIE	=	0x00c3
                    00C4    379 G$CANIDM1$0$0 == 0x00c4
                    00C4    380 _CANIDM1	=	0x00c4
                    00C5    381 G$CANIDM2$0$0 == 0x00c5
                    00C5    382 _CANIDM2	=	0x00c5
                    00C6    383 G$CANIDM3$0$0 == 0x00c6
                    00C6    384 _CANIDM3	=	0x00c6
                    00C7    385 G$CANIDM4$0$0 == 0x00c7
                    00C7    386 _CANIDM4	=	0x00c7
                    00CF    387 G$CANEN$0$0 == 0x00cf
                    00CF    388 _CANEN	=	0x00cf
                            389 ;--------------------------------------------------------
                            390 ; special function bits
                            391 ;--------------------------------------------------------
                            392 	.area RSEG    (DATA)
                    0097    393 G$P1_7$0$0 == 0x0097
                    0097    394 _P1_7	=	0x0097
                    0096    395 G$P1_6$0$0 == 0x0096
                    0096    396 _P1_6	=	0x0096
                    0095    397 G$P1_5$0$0 == 0x0095
                    0095    398 _P1_5	=	0x0095
                    0094    399 G$P1_4$0$0 == 0x0094
                    0094    400 _P1_4	=	0x0094
                    0093    401 G$P1_3$0$0 == 0x0093
                    0093    402 _P1_3	=	0x0093
                    0092    403 G$P1_2$0$0 == 0x0092
                    0092    404 _P1_2	=	0x0092
                    0091    405 G$P1_1$0$0 == 0x0091
                    0091    406 _P1_1	=	0x0091
                    0090    407 G$P1_0$0$0 == 0x0090
                    0090    408 _P1_0	=	0x0090
                    00A1    409 G$P2_1$0$0 == 0x00a1
                    00A1    410 _P2_1	=	0x00a1
                    00A0    411 G$P2_0$0$0 == 0x00a0
                    00A0    412 _P2_0	=	0x00a0
                    00B7    413 G$P3_7$0$0 == 0x00b7
                    00B7    414 _P3_7	=	0x00b7
                    00B6    415 G$P3_6$0$0 == 0x00b6
                    00B6    416 _P3_6	=	0x00b6
                    00B5    417 G$P3_5$0$0 == 0x00b5
                    00B5    418 _P3_5	=	0x00b5
                    00B4    419 G$P3_4$0$0 == 0x00b4
                    00B4    420 _P3_4	=	0x00b4
                    00B3    421 G$P3_3$0$0 == 0x00b3
                    00B3    422 _P3_3	=	0x00b3
                    00B2    423 G$P3_2$0$0 == 0x00b2
                    00B2    424 _P3_2	=	0x00b2
                    00B1    425 G$P3_1$0$0 == 0x00b1
                    00B1    426 _P3_1	=	0x00b1
                    00B0    427 G$P3_0$0$0 == 0x00b0
                    00B0    428 _P3_0	=	0x00b0
                    00B7    429 G$RD$0$0 == 0x00b7
                    00B7    430 _RD	=	0x00b7
                    00B6    431 G$WR$0$0 == 0x00b6
                    00B6    432 _WR	=	0x00b6
                    00B5    433 G$T1$0$0 == 0x00b5
                    00B5    434 _T1	=	0x00b5
                    00B4    435 G$T0$0$0 == 0x00b4
                    00B4    436 _T0	=	0x00b4
                    00B3    437 G$INT1$0$0 == 0x00b3
                    00B3    438 _INT1	=	0x00b3
                    00B2    439 G$INT0$0$0 == 0x00b2
                    00B2    440 _INT0	=	0x00b2
                    00B1    441 G$TXD$0$0 == 0x00b1
                    00B1    442 _TXD	=	0x00b1
                    00B0    443 G$RXD$0$0 == 0x00b0
                    00B0    444 _RXD	=	0x00b0
                    00C1    445 G$P4_1$0$0 == 0x00c1
                    00C1    446 _P4_1	=	0x00c1
                    00C0    447 G$P4_0$0$0 == 0x00c0
                    00C0    448 _P4_0	=	0x00c0
                    00D7    449 G$CY$0$0 == 0x00d7
                    00D7    450 _CY	=	0x00d7
                    00D6    451 G$AC$0$0 == 0x00d6
                    00D6    452 _AC	=	0x00d6
                    00D5    453 G$F0$0$0 == 0x00d5
                    00D5    454 _F0	=	0x00d5
                    00D4    455 G$RS1$0$0 == 0x00d4
                    00D4    456 _RS1	=	0x00d4
                    00D3    457 G$RS0$0$0 == 0x00d3
                    00D3    458 _RS0	=	0x00d3
                    00D2    459 G$OV$0$0 == 0x00d2
                    00D2    460 _OV	=	0x00d2
                    00D1    461 G$UD$0$0 == 0x00d1
                    00D1    462 _UD	=	0x00d1
                    00D0    463 G$P$0$0 == 0x00d0
                    00D0    464 _P	=	0x00d0
                    008F    465 G$TF1$0$0 == 0x008f
                    008F    466 _TF1	=	0x008f
                    008E    467 G$TR1$0$0 == 0x008e
                    008E    468 _TR1	=	0x008e
                    008D    469 G$TF0$0$0 == 0x008d
                    008D    470 _TF0	=	0x008d
                    008C    471 G$TR0$0$0 == 0x008c
                    008C    472 _TR0	=	0x008c
                    008B    473 G$IE1$0$0 == 0x008b
                    008B    474 _IE1	=	0x008b
                    008A    475 G$IT1$0$0 == 0x008a
                    008A    476 _IT1	=	0x008a
                    0089    477 G$IE0$0$0 == 0x0089
                    0089    478 _IE0	=	0x0089
                    0088    479 G$IT0$0$0 == 0x0088
                    0088    480 _IT0	=	0x0088
                    00CF    481 G$TF2$0$0 == 0x00cf
                    00CF    482 _TF2	=	0x00cf
                    00CE    483 G$EXF2$0$0 == 0x00ce
                    00CE    484 _EXF2	=	0x00ce
                    00CD    485 G$RCLK$0$0 == 0x00cd
                    00CD    486 _RCLK	=	0x00cd
                    00CC    487 G$TCLK$0$0 == 0x00cc
                    00CC    488 _TCLK	=	0x00cc
                    00CB    489 G$EXEN2$0$0 == 0x00cb
                    00CB    490 _EXEN2	=	0x00cb
                    00CA    491 G$TR2$0$0 == 0x00ca
                    00CA    492 _TR2	=	0x00ca
                    00C9    493 G$C_T2$0$0 == 0x00c9
                    00C9    494 _C_T2	=	0x00c9
                    00C8    495 G$CP_RL2$0$0 == 0x00c8
                    00C8    496 _CP_RL2	=	0x00c8
                    009F    497 G$SM0$0$0 == 0x009f
                    009F    498 _SM0	=	0x009f
                    009F    499 G$FE$0$0 == 0x009f
                    009F    500 _FE	=	0x009f
                    009E    501 G$SM1$0$0 == 0x009e
                    009E    502 _SM1	=	0x009e
                    009D    503 G$SM2$0$0 == 0x009d
                    009D    504 _SM2	=	0x009d
                    009C    505 G$REN$0$0 == 0x009c
                    009C    506 _REN	=	0x009c
                    009B    507 G$TB8$0$0 == 0x009b
                    009B    508 _TB8	=	0x009b
                    009A    509 G$RB8$0$0 == 0x009a
                    009A    510 _RB8	=	0x009a
                    0099    511 G$TI$0$0 == 0x0099
                    0099    512 _TI	=	0x0099
                    0098    513 G$RI$0$0 == 0x0098
                    0098    514 _RI	=	0x0098
                    00AF    515 G$EA$0$0 == 0x00af
                    00AF    516 _EA	=	0x00af
                    00AE    517 G$EC$0$0 == 0x00ae
                    00AE    518 _EC	=	0x00ae
                    00AD    519 G$ET2$0$0 == 0x00ad
                    00AD    520 _ET2	=	0x00ad
                    00AC    521 G$ES$0$0 == 0x00ac
                    00AC    522 _ES	=	0x00ac
                    00AB    523 G$ET1$0$0 == 0x00ab
                    00AB    524 _ET1	=	0x00ab
                    00AA    525 G$EX1$0$0 == 0x00aa
                    00AA    526 _EX1	=	0x00aa
                    00A9    527 G$ET0$0$0 == 0x00a9
                    00A9    528 _ET0	=	0x00a9
                    00A8    529 G$EX0$0$0 == 0x00a8
                    00A8    530 _EX0	=	0x00a8
                    00EA    531 G$ETIM$0$0 == 0x00ea
                    00EA    532 _ETIM	=	0x00ea
                    00E9    533 G$EADC$0$0 == 0x00e9
                    00E9    534 _EADC	=	0x00e9
                    00E8    535 G$ECAN$0$0 == 0x00e8
                    00E8    536 _ECAN	=	0x00e8
                    00DF    537 G$CF$0$0 == 0x00df
                    00DF    538 _CF	=	0x00df
                    00DE    539 G$CR$0$0 == 0x00de
                    00DE    540 _CR	=	0x00de
                    00DC    541 G$CCF4$0$0 == 0x00dc
                    00DC    542 _CCF4	=	0x00dc
                    00DB    543 G$CCF3$0$0 == 0x00db
                    00DB    544 _CCF3	=	0x00db
                    00DA    545 G$CCF2$0$0 == 0x00da
                    00DA    546 _CCF2	=	0x00da
                    00D9    547 G$CCF1$0$0 == 0x00d9
                    00D9    548 _CCF1	=	0x00d9
                    00D8    549 G$CCF0$0$0 == 0x00d8
                    00D8    550 _CCF0	=	0x00d8
                            551 ;--------------------------------------------------------
                            552 ; overlayable register banks
                            553 ;--------------------------------------------------------
                            554 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     555 	.ds 8
                            556 ;--------------------------------------------------------
                            557 ; internal ram data
                            558 ;--------------------------------------------------------
                            559 	.area DSEG    (DATA)
                    0000    560 G$u32Tmr1Reload$0$0==.
   0000                     561 _u32Tmr1Reload::
   0000                     562 	.ds 4
                    0004    563 G$u32Tmr1TmpReload$0$0==.
   0004                     564 _u32Tmr1TmpReload::
   0004                     565 	.ds 4
                    0008    566 G$Tmr1UsrIsrFnc$0$0==.
   0008                     567 _Tmr1UsrIsrFnc::
   0008                     568 	.ds 2
                            569 ;--------------------------------------------------------
                            570 ; overlayable items in internal ram 
                            571 ;--------------------------------------------------------
                            572 	.area	OSEG    (OVR,DATA)
                    0000    573 LTmr1Init$Typ$1$1==.
   0000                     574 _Tmr1Init_PARM_2::
   0000                     575 	.ds 1
                            576 	.area	OSEG    (OVR,DATA)
                            577 ;--------------------------------------------------------
                            578 ; indirectly addressable internal ram data
                            579 ;--------------------------------------------------------
                            580 	.area ISEG    (DATA)
                            581 ;--------------------------------------------------------
                            582 ; absolute internal ram data
                            583 ;--------------------------------------------------------
                            584 	.area IABS    (ABS,DATA)
                            585 	.area IABS    (ABS,DATA)
                            586 ;--------------------------------------------------------
                            587 ; bit data
                            588 ;--------------------------------------------------------
                            589 	.area BSEG    (BIT)
                    0000    590 LTmr1SetTime$bTR1$1$1==.
   0000                     591 _Tmr1SetTime_bTR1_1_1:
   0000                     592 	.ds 1
                    0001    593 LTmr1SetTime$bET1$1$1==.
   0001                     594 _Tmr1SetTime_bET1_1_1:
   0001                     595 	.ds 1
                            596 ;--------------------------------------------------------
                            597 ; paged external ram data
                            598 ;--------------------------------------------------------
                            599 	.area PSEG    (PAG,XDATA)
                            600 ;--------------------------------------------------------
                            601 ; external ram data
                            602 ;--------------------------------------------------------
                            603 	.area XSEG    (XDATA)
                            604 ;--------------------------------------------------------
                            605 ; absolute external ram data
                            606 ;--------------------------------------------------------
                            607 	.area XABS    (ABS,XDATA)
                            608 ;--------------------------------------------------------
                            609 ; external initialized ram data
                            610 ;--------------------------------------------------------
                            611 	.area XISEG   (XDATA)
                            612 	.area HOME    (CODE)
                            613 	.area GSINIT0 (CODE)
                            614 	.area GSINIT1 (CODE)
                            615 	.area GSINIT2 (CODE)
                            616 	.area GSINIT3 (CODE)
                            617 	.area GSINIT4 (CODE)
                            618 	.area GSINIT5 (CODE)
                            619 	.area GSINIT  (CODE)
                            620 	.area GSFINAL (CODE)
                            621 	.area CSEG    (CODE)
                            622 ;--------------------------------------------------------
                            623 ; global & static initialisations
                            624 ;--------------------------------------------------------
                            625 	.area HOME    (CODE)
                            626 	.area GSINIT  (CODE)
                            627 	.area GSFINAL (CODE)
                            628 	.area GSINIT  (CODE)
                    0000    629 	G$Tmr1IsrFnc$0$0 ==.
                    0000    630 	C$timer1.c$22$1$1 ==.
                            631 ;	timer1.c:22: void (*Tmr1UsrIsrFnc) (void) = NULL_FNC;
   0000 E4                  632 	clr	a
   0001 F5*08               633 	mov	_Tmr1UsrIsrFnc,a
   0003 F5*09               634 	mov	(_Tmr1UsrIsrFnc + 1),a
                            635 ;--------------------------------------------------------
                            636 ; Home
                            637 ;--------------------------------------------------------
                            638 	.area HOME    (CODE)
                            639 	.area HOME    (CODE)
                            640 ;--------------------------------------------------------
                            641 ; code
                            642 ;--------------------------------------------------------
                            643 	.area CSEG    (CODE)
                            644 ;------------------------------------------------------------
                            645 ;Allocation info for local variables in function 'Tmr1Init'
                            646 ;------------------------------------------------------------
                            647 ;Typ                       Allocated with name '_Tmr1Init_PARM_2'
                            648 ;Mode                      Allocated to registers r2 
                            649 ;------------------------------------------------------------
                    0000    650 	G$Tmr1Init$0$0 ==.
                    0000    651 	C$timer1.c$30$0$0 ==.
                            652 ;	timer1.c:30: void Tmr1Init(TTmrMode Mode, TTmrTyp Typ)
                            653 ;	-----------------------------------------
                            654 ;	 function Tmr1Init
                            655 ;	-----------------------------------------
   0000                     656 _Tmr1Init:
                    0002    657 	ar2 = 0x02
                    0003    658 	ar3 = 0x03
                    0004    659 	ar4 = 0x04
                    0005    660 	ar5 = 0x05
                    0006    661 	ar6 = 0x06
                    0007    662 	ar7 = 0x07
                    0000    663 	ar0 = 0x00
                    0001    664 	ar1 = 0x01
   0000 AA 82               665 	mov	r2,dpl
                    0002    666 	C$timer1.c$33$1$1 ==.
                            667 ;	timer1.c:33: TMOD &= ~0x30;
   0002 53 89 CF            668 	anl	_TMOD,#0xCF
                    0005    669 	C$timer1.c$34$1$1 ==.
                            670 ;	timer1.c:34: TMOD |= ((Mode << 4) &0x30);
   0005 EA                  671 	mov	a,r2
   0006 C4                  672 	swap	a
   0007 54 F0               673 	anl	a,#0xf0
   0009 FA                  674 	mov	r2,a
   000A 74 30               675 	mov	a,#0x30
   000C 5A                  676 	anl	a,r2
   000D 42 89               677 	orl	_TMOD,a
                    000F    678 	C$timer1.c$37$1$1 ==.
                            679 ;	timer1.c:37: TMOD &= ~0x40;
   000F 53 89 BF            680 	anl	_TMOD,#0xBF
                    0012    681 	C$timer1.c$38$1$1 ==.
                            682 ;	timer1.c:38: TMOD |= ((Typ << 6) & 0x40);
   0012 E5*00               683 	mov	a,_Tmr1Init_PARM_2
   0014 03                  684 	rr	a
   0015 03                  685 	rr	a
   0016 54 C0               686 	anl	a,#0xc0
   0018 FA                  687 	mov	r2,a
   0019 74 40               688 	mov	a,#0x40
   001B 5A                  689 	anl	a,r2
   001C 42 89               690 	orl	_TMOD,a
                    001E    691 	C$timer1.c$39$1$1 ==.
                    001E    692 	XG$Tmr1Init$0$0 ==.
   001E 22                  693 	ret
                            694 ;------------------------------------------------------------
                            695 ;Allocation info for local variables in function 'Tmr1SetTime'
                            696 ;------------------------------------------------------------
                            697 ;u16Zeit                   Allocated to registers r2 r3 
                            698 ;------------------------------------------------------------
                    001F    699 	G$Tmr1SetTime$0$0 ==.
                    001F    700 	C$timer1.c$52$1$1 ==.
                            701 ;	timer1.c:52: void Tmr1SetTime(__u16 u16Zeit) __critical
                            702 ;	-----------------------------------------
                            703 ;	 function Tmr1SetTime
                            704 ;	-----------------------------------------
   001F                     705 _Tmr1SetTime:
   001F D3                  706 	setb	c
   0020 10 AF 01            707 	jbc	ea,00108$
   0023 C3                  708 	clr	c
   0024                     709 00108$:
   0024 C0 D0               710 	push	psw
   0026 AA 82               711 	mov	r2,dpl
   0028 AB 83               712 	mov	r3,dph
                    002A    713 	C$timer1.c$54$1$1 ==.
                            714 ;	timer1.c:54: __bit bTR1 = TR1;
   002A A2 8E               715 	mov	c,_TR1
   002C 92*00               716 	mov	_Tmr1SetTime_bTR1_1_1,c
                    002E    717 	C$timer1.c$55$1$1 ==.
                            718 ;	timer1.c:55: __bit bET1 = ET1;
   002E A2 AB               719 	mov	c,_ET1
   0030 92*01               720 	mov	_Tmr1SetTime_bET1_1_1,c
                    0032    721 	C$timer1.c$58$1$1 ==.
                            722 ;	timer1.c:58: TR1 = 0;
   0032 C2 8E               723 	clr	_TR1
                    0034    724 	C$timer1.c$59$1$1 ==.
                            725 ;	timer1.c:59: u32Tmr1Reload = (SysGetQuarzFreq() / 1000L) * u16Zeit;
   0034 C0 02               726 	push	ar2
   0036 C0 03               727 	push	ar3
   0038 12s00r00            728 	lcall	_SysGetQuarzFreq
   003B 75*00 E8            729 	mov	__divulong_PARM_2,#0xE8
   003E 75*01 03            730 	mov	(__divulong_PARM_2 + 1),#0x03
   0041 75*02 00            731 	mov	(__divulong_PARM_2 + 2),#0x00
   0044 75*03 00            732 	mov	(__divulong_PARM_2 + 3),#0x00
   0047 12s00r00            733 	lcall	__divulong
   004A AC 82               734 	mov	r4,dpl
   004C AD 83               735 	mov	r5,dph
   004E AE F0               736 	mov	r6,b
   0050 FF                  737 	mov	r7,a
   0051 D0 03               738 	pop	ar3
   0053 D0 02               739 	pop	ar2
   0055 8A*00               740 	mov	__mullong_PARM_2,r2
   0057 8B*01               741 	mov	(__mullong_PARM_2 + 1),r3
   0059 75*02 00            742 	mov	(__mullong_PARM_2 + 2),#0x00
   005C 75*03 00            743 	mov	(__mullong_PARM_2 + 3),#0x00
   005F 8C 82               744 	mov	dpl,r4
   0061 8D 83               745 	mov	dph,r5
   0063 8E F0               746 	mov	b,r6
   0065 EF                  747 	mov	a,r7
   0066 12s00r00            748 	lcall	__mullong
   0069 85 82*00            749 	mov	_u32Tmr1Reload,dpl
   006C 85 83*01            750 	mov	(_u32Tmr1Reload + 1),dph
   006F 85 F0*02            751 	mov	(_u32Tmr1Reload + 2),b
   0072 F5*03               752 	mov	(_u32Tmr1Reload + 3),a
                    0074    753 	C$timer1.c$60$1$1 ==.
                            754 ;	timer1.c:60: u32Tmr1Reload /= 6;
   0074 75*00 06            755 	mov	__divulong_PARM_2,#0x06
   0077 E4                  756 	clr	a
   0078 F5*01               757 	mov	(__divulong_PARM_2 + 1),a
   007A F5*02               758 	mov	(__divulong_PARM_2 + 2),a
   007C F5*03               759 	mov	(__divulong_PARM_2 + 3),a
   007E 85*00 82            760 	mov	dpl,_u32Tmr1Reload
   0081 85*01 83            761 	mov	dph,(_u32Tmr1Reload + 1)
   0084 85*02 F0            762 	mov	b,(_u32Tmr1Reload + 2)
   0087 E5*03               763 	mov	a,(_u32Tmr1Reload + 3)
   0089 12s00r00            764 	lcall	__divulong
   008C 85 82*00            765 	mov	_u32Tmr1Reload,dpl
   008F 85 83*01            766 	mov	(_u32Tmr1Reload + 1),dph
   0092 85 F0*02            767 	mov	(_u32Tmr1Reload + 2),b
   0095 F5*03               768 	mov	(_u32Tmr1Reload + 3),a
                    0097    769 	C$timer1.c$63$1$1 ==.
                            770 ;	timer1.c:63: if ((isrFncTmr1 != Tmr1IsrFnc) && (Tmr1UsrIsrFnc != Tmr1IsrFnc))
   0097 74r05               771 	mov	a,#_Tmr1IsrFnc
   0099 B5*00 07            772 	cjne	a,_isrFncTmr1,00109$
   009C 74s01               773 	mov	a,#(_Tmr1IsrFnc >> 8)
   009E B5*01 02            774 	cjne	a,(_isrFncTmr1 + 1),00109$
   00A1 80 18               775 	sjmp	00102$
   00A3                     776 00109$:
   00A3 74r05               777 	mov	a,#_Tmr1IsrFnc
   00A5 B5*08 07            778 	cjne	a,_Tmr1UsrIsrFnc,00110$
   00A8 74s01               779 	mov	a,#(_Tmr1IsrFnc >> 8)
   00AA B5*09 02            780 	cjne	a,(_Tmr1UsrIsrFnc + 1),00110$
   00AD 80 0C               781 	sjmp	00102$
   00AF                     782 00110$:
                    00AF    783 	C$timer1.c$65$2$2 ==.
                            784 ;	timer1.c:65: Tmr1UsrIsrFnc = isrFncTmr1;
   00AF 85*00*08            785 	mov	_Tmr1UsrIsrFnc,_isrFncTmr1
   00B2 85*01*09            786 	mov	(_Tmr1UsrIsrFnc + 1),(_isrFncTmr1 + 1)
                    00B5    787 	C$timer1.c$66$2$2 ==.
                            788 ;	timer1.c:66: isrFncTmr1 = Tmr1IsrFnc;
   00B5 75*00r05            789 	mov	_isrFncTmr1,#_Tmr1IsrFnc
   00B8 75*01s01            790 	mov	(_isrFncTmr1 + 1),#(_Tmr1IsrFnc >> 8)
   00BB                     791 00102$:
                    00BB    792 	C$timer1.c$69$1$1 ==.
                            793 ;	timer1.c:69: TR1 = bTR1;
   00BB A2*00               794 	mov	c,_Tmr1SetTime_bTR1_1_1
   00BD 92 8E               795 	mov	_TR1,c
                    00BF    796 	C$timer1.c$70$1$1 ==.
                            797 ;	timer1.c:70: ET1 = bET1;
   00BF A2*01               798 	mov	c,_Tmr1SetTime_bET1_1_1
   00C1 92 AB               799 	mov	_ET1,c
   00C3 D0 D0               800 	pop	psw
   00C5 92 AF               801 	mov	ea,c
                    00C7    802 	C$timer1.c$71$1$1 ==.
                    00C7    803 	XG$Tmr1SetTime$0$0 ==.
   00C7 22                  804 	ret
                            805 ;------------------------------------------------------------
                            806 ;Allocation info for local variables in function 'Tmr1SetValue'
                            807 ;------------------------------------------------------------
                            808 ;u16Value                  Allocated to registers r2 r3 
                            809 ;------------------------------------------------------------
                    00C8    810 	G$Tmr1SetValue$0$0 ==.
                    00C8    811 	C$timer1.c$78$1$1 ==.
                            812 ;	timer1.c:78: void Tmr1SetValue(__u16 u16Value) __critical
                            813 ;	-----------------------------------------
                            814 ;	 function Tmr1SetValue
                            815 ;	-----------------------------------------
   00C8                     816 _Tmr1SetValue:
   00C8 D3                  817 	setb	c
   00C9 10 AF 01            818 	jbc	ea,00103$
   00CC C3                  819 	clr	c
   00CD                     820 00103$:
   00CD C0 D0               821 	push	psw
   00CF AA 82               822 	mov	r2,dpl
   00D1 AB 83               823 	mov	r3,dph
                    00D3    824 	C$timer1.c$80$1$1 ==.
                            825 ;	timer1.c:80: TL1 = (__u8) (u16Value & 0x00FF);
   00D3 8A 04               826 	mov	ar4,r2
   00D5 8C 8B               827 	mov	_TL1,r4
                    00D7    828 	C$timer1.c$81$1$1 ==.
                            829 ;	timer1.c:81: TH1 = (__u8) (u16Value >> 8);
   00D7 8B 8D               830 	mov	_TH1,r3
   00D9 D0 D0               831 	pop	psw
   00DB 92 AF               832 	mov	ea,c
                    00DD    833 	C$timer1.c$82$1$1 ==.
                    00DD    834 	XG$Tmr1SetValue$0$0 ==.
   00DD 22                  835 	ret
                            836 ;------------------------------------------------------------
                            837 ;Allocation info for local variables in function 'Tmr1GetValue'
                            838 ;------------------------------------------------------------
                            839 ;------------------------------------------------------------
                    00DE    840 	G$Tmr1GetValue$0$0 ==.
                    00DE    841 	C$timer1.c$89$1$1 ==.
                            842 ;	timer1.c:89: __u16 Tmr1GetValue(void) __critical
                            843 ;	-----------------------------------------
                            844 ;	 function Tmr1GetValue
                            845 ;	-----------------------------------------
   00DE                     846 _Tmr1GetValue:
   00DE D3                  847 	setb	c
   00DF 10 AF 01            848 	jbc	ea,00108$
   00E2 C3                  849 	clr	c
   00E3                     850 00108$:
   00E3 C0 D0               851 	push	psw
                    00E5    852 	C$timer1.c$91$1$1 ==.
                            853 ;	timer1.c:91: return (__u16)(((__u16)TH1 << 8) || TL1);
   00E5 AA 8D               854 	mov	r2,_TH1
   00E7 8A 03               855 	mov	ar3,r2
   00E9 E4                  856 	clr	a
   00EA FA                  857 	mov	r2,a
   00EB 4B                  858 	orl	a,r3
   00EC 70 07               859 	jnz	00104$
   00EE E5 8B               860 	mov	a,_TL1
   00F0 70 03               861 	jnz	00104$
   00F2 FA                  862 	mov	r2,a
   00F3 80 02               863 	sjmp	00105$
   00F5                     864 00104$:
   00F5 7A 01               865 	mov	r2,#0x01
   00F7                     866 00105$:
   00F7 EA                  867 	mov	a,r2
   00F8 33                  868 	rlc	a
   00F9 95 E0               869 	subb	a,acc
   00FB FB                  870 	mov	r3,a
   00FC 8A 82               871 	mov	dpl,r2
   00FE 8B 83               872 	mov	dph,r3
   0100 D0 D0               873 	pop	psw
   0102 92 AF               874 	mov	ea,c
                    0104    875 	C$timer1.c$92$1$1 ==.
                    0104    876 	XG$Tmr1GetValue$0$0 ==.
   0104 22                  877 	ret
                            878 ;------------------------------------------------------------
                            879 ;Allocation info for local variables in function 'Tmr1IsrFnc'
                            880 ;------------------------------------------------------------
                            881 ;------------------------------------------------------------
                    0105    882 	G$Tmr1IsrFnc$0$0 ==.
                    0105    883 	C$timer1.c$102$1$1 ==.
                            884 ;	timer1.c:102: void Tmr1IsrFnc(void) __critical
                            885 ;	-----------------------------------------
                            886 ;	 function Tmr1IsrFnc
                            887 ;	-----------------------------------------
   0105                     888 _Tmr1IsrFnc:
   0105 D3                  889 	setb	c
   0106 10 AF 01            890 	jbc	ea,00113$
   0109 C3                  891 	clr	c
   010A                     892 00113$:
   010A C0 D0               893 	push	psw
                    010C    894 	C$timer1.c$105$1$1 ==.
                            895 ;	timer1.c:105: if (u32Tmr1TmpReload == 0)
   010C E5*04               896 	mov	a,_u32Tmr1TmpReload
   010E 45*05               897 	orl	a,(_u32Tmr1TmpReload + 1)
   0110 45*06               898 	orl	a,(_u32Tmr1TmpReload + 2)
   0112 45*07               899 	orl	a,(_u32Tmr1TmpReload + 3)
   0114 70 1B               900 	jnz	00104$
                    0116    901 	C$timer1.c$107$2$2 ==.
                            902 ;	timer1.c:107: u32Tmr1TmpReload = u32Tmr1Reload;
   0116 85*00*04            903 	mov	_u32Tmr1TmpReload,_u32Tmr1Reload
   0119 85*01*05            904 	mov	(_u32Tmr1TmpReload + 1),(_u32Tmr1Reload + 1)
   011C 85*02*06            905 	mov	(_u32Tmr1TmpReload + 2),(_u32Tmr1Reload + 2)
   011F 85*03*07            906 	mov	(_u32Tmr1TmpReload + 3),(_u32Tmr1Reload + 3)
                    0122    907 	C$timer1.c$108$2$2 ==.
                            908 ;	timer1.c:108: if (Tmr1UsrIsrFnc != NULL_FNC)
   0122 E5*08               909 	mov	a,_Tmr1UsrIsrFnc
   0124 45*09               910 	orl	a,(_Tmr1UsrIsrFnc + 1)
   0126 60 09               911 	jz	00104$
                    0128    912 	C$timer1.c$110$3$3 ==.
                            913 ;	timer1.c:110: Tmr1UsrIsrFnc();
   0128 85*08 82            914 	mov	dpl,_Tmr1UsrIsrFnc
   012B 85*09 83            915 	mov	dph,(_Tmr1UsrIsrFnc + 1)
   012E 12s00r00            916 	lcall	__sdcc_call_dptr
   0131                     917 00104$:
                    0131    918 	C$timer1.c$114$1$1 ==.
                            919 ;	timer1.c:114: if (u32Tmr1TmpReload < 0x0000FFFFL)
   0131 C3                  920 	clr	c
   0132 E5*04               921 	mov	a,_u32Tmr1TmpReload
   0134 94 FF               922 	subb	a,#0xFF
   0136 E5*05               923 	mov	a,(_u32Tmr1TmpReload + 1)
   0138 94 FF               924 	subb	a,#0xFF
   013A E5*06               925 	mov	a,(_u32Tmr1TmpReload + 2)
   013C 94 00               926 	subb	a,#0x00
   013E E5*07               927 	mov	a,(_u32Tmr1TmpReload + 3)
   0140 94 00               928 	subb	a,#0x00
   0142 50 2D               929 	jnc	00106$
                    0144    930 	C$timer1.c$116$2$4 ==.
                            931 ;	timer1.c:116: u32Tmr1TmpReload = (-u32Tmr1TmpReload);
   0144 C3                  932 	clr	c
   0145 E4                  933 	clr	a
   0146 95*04               934 	subb	a,_u32Tmr1TmpReload
   0148 F5*04               935 	mov	_u32Tmr1TmpReload,a
   014A E4                  936 	clr	a
   014B 95*05               937 	subb	a,(_u32Tmr1TmpReload + 1)
   014D F5*05               938 	mov	(_u32Tmr1TmpReload + 1),a
   014F E4                  939 	clr	a
   0150 95*06               940 	subb	a,(_u32Tmr1TmpReload + 2)
   0152 F5*06               941 	mov	(_u32Tmr1TmpReload + 2),a
   0154 E4                  942 	clr	a
   0155 95*07               943 	subb	a,(_u32Tmr1TmpReload + 3)
   0157 F5*07               944 	mov	(_u32Tmr1TmpReload + 3),a
                    0159    945 	C$timer1.c$118$2$4 ==.
                            946 ;	timer1.c:118: TL1 = (__u8) (u32Tmr1TmpReload & 0xFF);
   0159 AA*04               947 	mov	r2,_u32Tmr1TmpReload
   015B 7B 00               948 	mov	r3,#0x00
   015D 7C 00               949 	mov	r4,#0x00
   015F 7D 00               950 	mov	r5,#0x00
   0161 8A 8B               951 	mov	_TL1,r2
                    0163    952 	C$timer1.c$119$2$4 ==.
                            953 ;	timer1.c:119: TH1 = (__u8) (u32Tmr1TmpReload >> 8);
   0163 85*05 8D            954 	mov	_TH1,(_u32Tmr1TmpReload + 1)
                    0166    955 	C$timer1.c$120$2$4 ==.
                            956 ;	timer1.c:120: u32Tmr1TmpReload = 0;
   0166 E4                  957 	clr	a
   0167 F5*04               958 	mov	_u32Tmr1TmpReload,a
   0169 F5*05               959 	mov	(_u32Tmr1TmpReload + 1),a
   016B F5*06               960 	mov	(_u32Tmr1TmpReload + 2),a
   016D F5*07               961 	mov	(_u32Tmr1TmpReload + 3),a
   016F 80 17               962 	sjmp	00108$
   0171                     963 00106$:
                    0171    964 	C$timer1.c$125$2$5 ==.
                            965 ;	timer1.c:125: u32Tmr1TmpReload -= 0xFFFFL;
   0171 E5*04               966 	mov	a,_u32Tmr1TmpReload
   0173 24 01               967 	add	a,#0x01
   0175 F5*04               968 	mov	_u32Tmr1TmpReload,a
   0177 E4                  969 	clr	a
   0178 35*05               970 	addc	a,(_u32Tmr1TmpReload + 1)
   017A F5*05               971 	mov	(_u32Tmr1TmpReload + 1),a
   017C E5*06               972 	mov	a,(_u32Tmr1TmpReload + 2)
   017E 34 FF               973 	addc	a,#0xff
   0180 F5*06               974 	mov	(_u32Tmr1TmpReload + 2),a
   0182 E5*07               975 	mov	a,(_u32Tmr1TmpReload + 3)
   0184 34 FF               976 	addc	a,#0xff
   0186 F5*07               977 	mov	(_u32Tmr1TmpReload + 3),a
   0188                     978 00108$:
   0188 D0 D0               979 	pop	psw
   018A 92 AF               980 	mov	ea,c
                    018C    981 	C$timer1.c$127$1$1 ==.
                    018C    982 	XG$Tmr1IsrFnc$0$0 ==.
   018C 22                  983 	ret
                            984 	.area CSEG    (CODE)
                            985 	.area CONST   (CODE)
                            986 	.area XINIT   (CODE)
                            987 	.area CABS    (ABS,CODE)
