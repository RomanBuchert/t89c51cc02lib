                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 2.9.0 #5416 (Feb  3 2010) (UNIX)
                              4 ; This file was generated Sun Feb 20 14:49:26 2011
                              5 ;--------------------------------------------------------
                              6 	.module timer0
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _Tmr0Init_PARM_2
                             13 	.globl _CCF0
                             14 	.globl _CCF1
                             15 	.globl _CCF2
                             16 	.globl _CCF3
                             17 	.globl _CCF4
                             18 	.globl _CR
                             19 	.globl _CF
                             20 	.globl _ECAN
                             21 	.globl _EADC
                             22 	.globl _ETIM
                             23 	.globl _EX0
                             24 	.globl _ET0
                             25 	.globl _EX1
                             26 	.globl _ET1
                             27 	.globl _ES
                             28 	.globl _ET2
                             29 	.globl _EC
                             30 	.globl _EA
                             31 	.globl _RI
                             32 	.globl _TI
                             33 	.globl _RB8
                             34 	.globl _TB8
                             35 	.globl _REN
                             36 	.globl _SM2
                             37 	.globl _SM1
                             38 	.globl _FE
                             39 	.globl _SM0
                             40 	.globl _CP_RL2
                             41 	.globl _C_T2
                             42 	.globl _TR2
                             43 	.globl _EXEN2
                             44 	.globl _TCLK
                             45 	.globl _RCLK
                             46 	.globl _EXF2
                             47 	.globl _TF2
                             48 	.globl _IT0
                             49 	.globl _IE0
                             50 	.globl _IT1
                             51 	.globl _IE1
                             52 	.globl _TR0
                             53 	.globl _TF0
                             54 	.globl _TR1
                             55 	.globl _TF1
                             56 	.globl _P
                             57 	.globl _UD
                             58 	.globl _OV
                             59 	.globl _RS0
                             60 	.globl _RS1
                             61 	.globl _F0
                             62 	.globl _AC
                             63 	.globl _CY
                             64 	.globl _P4_0
                             65 	.globl _P4_1
                             66 	.globl _RXD
                             67 	.globl _TXD
                             68 	.globl _INT0
                             69 	.globl _INT1
                             70 	.globl _T0
                             71 	.globl _T1
                             72 	.globl _WR
                             73 	.globl _RD
                             74 	.globl _P3_0
                             75 	.globl _P3_1
                             76 	.globl _P3_2
                             77 	.globl _P3_3
                             78 	.globl _P3_4
                             79 	.globl _P3_5
                             80 	.globl _P3_6
                             81 	.globl _P3_7
                             82 	.globl _P2_0
                             83 	.globl _P2_1
                             84 	.globl _P1_0
                             85 	.globl _P1_1
                             86 	.globl _P1_2
                             87 	.globl _P1_3
                             88 	.globl _P1_4
                             89 	.globl _P1_5
                             90 	.globl _P1_6
                             91 	.globl _P1_7
                             92 	.globl _CANEN
                             93 	.globl _CANIDM4
                             94 	.globl _CANIDM3
                             95 	.globl _CANIDM2
                             96 	.globl _CANIDM1
                             97 	.globl _CANIE
                             98 	.globl _CANGIE
                             99 	.globl _CANIDT4
                            100 	.globl _CANIDT3
                            101 	.globl _CANIDT2
                            102 	.globl _CANIDT1
                            103 	.globl _CANSIT
                            104 	.globl _CANBT3
                            105 	.globl _CANBT2
                            106 	.globl _CANBT1
                            107 	.globl _CANCONCH
                            108 	.globl _CANSTCH
                            109 	.globl _CANPAGE
                            110 	.globl _CANSTMPH
                            111 	.globl _CANSTMPL
                            112 	.globl _CANTIMH
                            113 	.globl _CANTIML
                            114 	.globl _CANGCON
                            115 	.globl _CANGSTA
                            116 	.globl _CANTTCH
                            117 	.globl _CANTTCL
                            118 	.globl _CANMSG
                            119 	.globl _CANTCON
                            120 	.globl _CANREC
                            121 	.globl _CANTEC
                            122 	.globl _CANGIT
                            123 	.globl _CCAPM4
                            124 	.globl _CCAP4L
                            125 	.globl _CCAP4H
                            126 	.globl _CCAPM3
                            127 	.globl _CCAP3L
                            128 	.globl _CCAP3H
                            129 	.globl _CCAPM2
                            130 	.globl _CCAP2L
                            131 	.globl _CCAP2H
                            132 	.globl _CCAPM1
                            133 	.globl _CCAP1L
                            134 	.globl _CCAP1H
                            135 	.globl _CCAPM0
                            136 	.globl _CCAP0L
                            137 	.globl _CCAP0H
                            138 	.globl _CL
                            139 	.globl _CH
                            140 	.globl _CMOD
                            141 	.globl _CCON
                            142 	.globl _IEN1
                            143 	.globl _IPH0
                            144 	.globl _IPL0
                            145 	.globl _IEN0
                            146 	.globl _IPH1
                            147 	.globl _IPL1
                            148 	.globl _AUXR1
                            149 	.globl _AUXR
                            150 	.globl _EECON
                            151 	.globl _FCON
                            152 	.globl _ADCF
                            153 	.globl _ADDH
                            154 	.globl _ADDL
                            155 	.globl _ADCON
                            156 	.globl _ADCLK
                            157 	.globl _SADDR
                            158 	.globl _SADEN
                            159 	.globl _SBUF
                            160 	.globl _SCON
                            161 	.globl _WDTPRG
                            162 	.globl _WDTRST
                            163 	.globl _RCAP2H
                            164 	.globl _RCAP2L
                            165 	.globl _TH2
                            166 	.globl _TH1
                            167 	.globl _TH0
                            168 	.globl _TL2
                            169 	.globl _TL1
                            170 	.globl _TL0
                            171 	.globl _T2MOD
                            172 	.globl _T2CON
                            173 	.globl _TMOD
                            174 	.globl _TCON
                            175 	.globl _CKCON
                            176 	.globl _PCON
                            177 	.globl _DPH
                            178 	.globl _DPL
                            179 	.globl _SP
                            180 	.globl _B
                            181 	.globl _ACC
                            182 	.globl _PSW
                            183 	.globl _P4
                            184 	.globl _P3
                            185 	.globl _P2
                            186 	.globl _P1
                            187 	.globl _Tmr0UsrIsrFnc
                            188 	.globl _u32Tmr0TmpReload
                            189 	.globl _u32Tmr0Reload
                            190 	.globl _Tmr0Init
                            191 	.globl _Tmr0SetTime
                            192 	.globl _Tmr0SetValue
                            193 	.globl _Tmr0GetValue
                            194 	.globl _Tmr0IsrFnc
                            195 ;--------------------------------------------------------
                            196 ; special function registers
                            197 ;--------------------------------------------------------
                            198 	.area RSEG    (DATA)
                    0090    199 G$P1$0$0 == 0x0090
                    0090    200 _P1	=	0x0090
                    00A0    201 G$P2$0$0 == 0x00a0
                    00A0    202 _P2	=	0x00a0
                    00B0    203 G$P3$0$0 == 0x00b0
                    00B0    204 _P3	=	0x00b0
                    00C0    205 G$P4$0$0 == 0x00c0
                    00C0    206 _P4	=	0x00c0
                    00D0    207 G$PSW$0$0 == 0x00d0
                    00D0    208 _PSW	=	0x00d0
                    00E0    209 G$ACC$0$0 == 0x00e0
                    00E0    210 _ACC	=	0x00e0
                    00F0    211 G$B$0$0 == 0x00f0
                    00F0    212 _B	=	0x00f0
                    0081    213 G$SP$0$0 == 0x0081
                    0081    214 _SP	=	0x0081
                    0082    215 G$DPL$0$0 == 0x0082
                    0082    216 _DPL	=	0x0082
                    0083    217 G$DPH$0$0 == 0x0083
                    0083    218 _DPH	=	0x0083
                    0087    219 G$PCON$0$0 == 0x0087
                    0087    220 _PCON	=	0x0087
                    008F    221 G$CKCON$0$0 == 0x008f
                    008F    222 _CKCON	=	0x008f
                    0088    223 G$TCON$0$0 == 0x0088
                    0088    224 _TCON	=	0x0088
                    0089    225 G$TMOD$0$0 == 0x0089
                    0089    226 _TMOD	=	0x0089
                    00C8    227 G$T2CON$0$0 == 0x00c8
                    00C8    228 _T2CON	=	0x00c8
                    00C9    229 G$T2MOD$0$0 == 0x00c9
                    00C9    230 _T2MOD	=	0x00c9
                    008A    231 G$TL0$0$0 == 0x008a
                    008A    232 _TL0	=	0x008a
                    008B    233 G$TL1$0$0 == 0x008b
                    008B    234 _TL1	=	0x008b
                    00CC    235 G$TL2$0$0 == 0x00cc
                    00CC    236 _TL2	=	0x00cc
                    008C    237 G$TH0$0$0 == 0x008c
                    008C    238 _TH0	=	0x008c
                    008D    239 G$TH1$0$0 == 0x008d
                    008D    240 _TH1	=	0x008d
                    00CD    241 G$TH2$0$0 == 0x00cd
                    00CD    242 _TH2	=	0x00cd
                    00CA    243 G$RCAP2L$0$0 == 0x00ca
                    00CA    244 _RCAP2L	=	0x00ca
                    00CB    245 G$RCAP2H$0$0 == 0x00cb
                    00CB    246 _RCAP2H	=	0x00cb
                    00A6    247 G$WDTRST$0$0 == 0x00a6
                    00A6    248 _WDTRST	=	0x00a6
                    00A7    249 G$WDTPRG$0$0 == 0x00a7
                    00A7    250 _WDTPRG	=	0x00a7
                    0098    251 G$SCON$0$0 == 0x0098
                    0098    252 _SCON	=	0x0098
                    0099    253 G$SBUF$0$0 == 0x0099
                    0099    254 _SBUF	=	0x0099
                    00B9    255 G$SADEN$0$0 == 0x00b9
                    00B9    256 _SADEN	=	0x00b9
                    00A9    257 G$SADDR$0$0 == 0x00a9
                    00A9    258 _SADDR	=	0x00a9
                    00F2    259 G$ADCLK$0$0 == 0x00f2
                    00F2    260 _ADCLK	=	0x00f2
                    00F3    261 G$ADCON$0$0 == 0x00f3
                    00F3    262 _ADCON	=	0x00f3
                    00F4    263 G$ADDL$0$0 == 0x00f4
                    00F4    264 _ADDL	=	0x00f4
                    00F5    265 G$ADDH$0$0 == 0x00f5
                    00F5    266 _ADDH	=	0x00f5
                    00F6    267 G$ADCF$0$0 == 0x00f6
                    00F6    268 _ADCF	=	0x00f6
                    00D1    269 G$FCON$0$0 == 0x00d1
                    00D1    270 _FCON	=	0x00d1
                    00D2    271 G$EECON$0$0 == 0x00d2
                    00D2    272 _EECON	=	0x00d2
                    008E    273 G$AUXR$0$0 == 0x008e
                    008E    274 _AUXR	=	0x008e
                    00A2    275 G$AUXR1$0$0 == 0x00a2
                    00A2    276 _AUXR1	=	0x00a2
                    00F8    277 G$IPL1$0$0 == 0x00f8
                    00F8    278 _IPL1	=	0x00f8
                    00F7    279 G$IPH1$0$0 == 0x00f7
                    00F7    280 _IPH1	=	0x00f7
                    00A8    281 G$IEN0$0$0 == 0x00a8
                    00A8    282 _IEN0	=	0x00a8
                    00B8    283 G$IPL0$0$0 == 0x00b8
                    00B8    284 _IPL0	=	0x00b8
                    00B7    285 G$IPH0$0$0 == 0x00b7
                    00B7    286 _IPH0	=	0x00b7
                    00E8    287 G$IEN1$0$0 == 0x00e8
                    00E8    288 _IEN1	=	0x00e8
                    00D8    289 G$CCON$0$0 == 0x00d8
                    00D8    290 _CCON	=	0x00d8
                    00D9    291 G$CMOD$0$0 == 0x00d9
                    00D9    292 _CMOD	=	0x00d9
                    00F9    293 G$CH$0$0 == 0x00f9
                    00F9    294 _CH	=	0x00f9
                    00E9    295 G$CL$0$0 == 0x00e9
                    00E9    296 _CL	=	0x00e9
                    00FA    297 G$CCAP0H$0$0 == 0x00fa
                    00FA    298 _CCAP0H	=	0x00fa
                    00EA    299 G$CCAP0L$0$0 == 0x00ea
                    00EA    300 _CCAP0L	=	0x00ea
                    00DA    301 G$CCAPM0$0$0 == 0x00da
                    00DA    302 _CCAPM0	=	0x00da
                    00FB    303 G$CCAP1H$0$0 == 0x00fb
                    00FB    304 _CCAP1H	=	0x00fb
                    00EB    305 G$CCAP1L$0$0 == 0x00eb
                    00EB    306 _CCAP1L	=	0x00eb
                    00DB    307 G$CCAPM1$0$0 == 0x00db
                    00DB    308 _CCAPM1	=	0x00db
                    00FC    309 G$CCAP2H$0$0 == 0x00fc
                    00FC    310 _CCAP2H	=	0x00fc
                    00EC    311 G$CCAP2L$0$0 == 0x00ec
                    00EC    312 _CCAP2L	=	0x00ec
                    00DC    313 G$CCAPM2$0$0 == 0x00dc
                    00DC    314 _CCAPM2	=	0x00dc
                    00FD    315 G$CCAP3H$0$0 == 0x00fd
                    00FD    316 _CCAP3H	=	0x00fd
                    00ED    317 G$CCAP3L$0$0 == 0x00ed
                    00ED    318 _CCAP3L	=	0x00ed
                    00DD    319 G$CCAPM3$0$0 == 0x00dd
                    00DD    320 _CCAPM3	=	0x00dd
                    00FE    321 G$CCAP4H$0$0 == 0x00fe
                    00FE    322 _CCAP4H	=	0x00fe
                    00EE    323 G$CCAP4L$0$0 == 0x00ee
                    00EE    324 _CCAP4L	=	0x00ee
                    00DE    325 G$CCAPM4$0$0 == 0x00de
                    00DE    326 _CCAPM4	=	0x00de
                    009B    327 G$CANGIT$0$0 == 0x009b
                    009B    328 _CANGIT	=	0x009b
                    009C    329 G$CANTEC$0$0 == 0x009c
                    009C    330 _CANTEC	=	0x009c
                    009D    331 G$CANREC$0$0 == 0x009d
                    009D    332 _CANREC	=	0x009d
                    00A1    333 G$CANTCON$0$0 == 0x00a1
                    00A1    334 _CANTCON	=	0x00a1
                    00A3    335 G$CANMSG$0$0 == 0x00a3
                    00A3    336 _CANMSG	=	0x00a3
                    00A4    337 G$CANTTCL$0$0 == 0x00a4
                    00A4    338 _CANTTCL	=	0x00a4
                    00A5    339 G$CANTTCH$0$0 == 0x00a5
                    00A5    340 _CANTTCH	=	0x00a5
                    00AA    341 G$CANGSTA$0$0 == 0x00aa
                    00AA    342 _CANGSTA	=	0x00aa
                    00AB    343 G$CANGCON$0$0 == 0x00ab
                    00AB    344 _CANGCON	=	0x00ab
                    00AC    345 G$CANTIML$0$0 == 0x00ac
                    00AC    346 _CANTIML	=	0x00ac
                    00AD    347 G$CANTIMH$0$0 == 0x00ad
                    00AD    348 _CANTIMH	=	0x00ad
                    00AE    349 G$CANSTMPL$0$0 == 0x00ae
                    00AE    350 _CANSTMPL	=	0x00ae
                    00AF    351 G$CANSTMPH$0$0 == 0x00af
                    00AF    352 _CANSTMPH	=	0x00af
                    00B1    353 G$CANPAGE$0$0 == 0x00b1
                    00B1    354 _CANPAGE	=	0x00b1
                    00B2    355 G$CANSTCH$0$0 == 0x00b2
                    00B2    356 _CANSTCH	=	0x00b2
                    00B3    357 G$CANCONCH$0$0 == 0x00b3
                    00B3    358 _CANCONCH	=	0x00b3
                    00B4    359 G$CANBT1$0$0 == 0x00b4
                    00B4    360 _CANBT1	=	0x00b4
                    00B5    361 G$CANBT2$0$0 == 0x00b5
                    00B5    362 _CANBT2	=	0x00b5
                    00B6    363 G$CANBT3$0$0 == 0x00b6
                    00B6    364 _CANBT3	=	0x00b6
                    00BB    365 G$CANSIT$0$0 == 0x00bb
                    00BB    366 _CANSIT	=	0x00bb
                    00BC    367 G$CANIDT1$0$0 == 0x00bc
                    00BC    368 _CANIDT1	=	0x00bc
                    00BD    369 G$CANIDT2$0$0 == 0x00bd
                    00BD    370 _CANIDT2	=	0x00bd
                    00BE    371 G$CANIDT3$0$0 == 0x00be
                    00BE    372 _CANIDT3	=	0x00be
                    00BF    373 G$CANIDT4$0$0 == 0x00bf
                    00BF    374 _CANIDT4	=	0x00bf
                    00C1    375 G$CANGIE$0$0 == 0x00c1
                    00C1    376 _CANGIE	=	0x00c1
                    00C3    377 G$CANIE$0$0 == 0x00c3
                    00C3    378 _CANIE	=	0x00c3
                    00C4    379 G$CANIDM1$0$0 == 0x00c4
                    00C4    380 _CANIDM1	=	0x00c4
                    00C5    381 G$CANIDM2$0$0 == 0x00c5
                    00C5    382 _CANIDM2	=	0x00c5
                    00C6    383 G$CANIDM3$0$0 == 0x00c6
                    00C6    384 _CANIDM3	=	0x00c6
                    00C7    385 G$CANIDM4$0$0 == 0x00c7
                    00C7    386 _CANIDM4	=	0x00c7
                    00CF    387 G$CANEN$0$0 == 0x00cf
                    00CF    388 _CANEN	=	0x00cf
                            389 ;--------------------------------------------------------
                            390 ; special function bits
                            391 ;--------------------------------------------------------
                            392 	.area RSEG    (DATA)
                    0097    393 G$P1_7$0$0 == 0x0097
                    0097    394 _P1_7	=	0x0097
                    0096    395 G$P1_6$0$0 == 0x0096
                    0096    396 _P1_6	=	0x0096
                    0095    397 G$P1_5$0$0 == 0x0095
                    0095    398 _P1_5	=	0x0095
                    0094    399 G$P1_4$0$0 == 0x0094
                    0094    400 _P1_4	=	0x0094
                    0093    401 G$P1_3$0$0 == 0x0093
                    0093    402 _P1_3	=	0x0093
                    0092    403 G$P1_2$0$0 == 0x0092
                    0092    404 _P1_2	=	0x0092
                    0091    405 G$P1_1$0$0 == 0x0091
                    0091    406 _P1_1	=	0x0091
                    0090    407 G$P1_0$0$0 == 0x0090
                    0090    408 _P1_0	=	0x0090
                    00A1    409 G$P2_1$0$0 == 0x00a1
                    00A1    410 _P2_1	=	0x00a1
                    00A0    411 G$P2_0$0$0 == 0x00a0
                    00A0    412 _P2_0	=	0x00a0
                    00B7    413 G$P3_7$0$0 == 0x00b7
                    00B7    414 _P3_7	=	0x00b7
                    00B6    415 G$P3_6$0$0 == 0x00b6
                    00B6    416 _P3_6	=	0x00b6
                    00B5    417 G$P3_5$0$0 == 0x00b5
                    00B5    418 _P3_5	=	0x00b5
                    00B4    419 G$P3_4$0$0 == 0x00b4
                    00B4    420 _P3_4	=	0x00b4
                    00B3    421 G$P3_3$0$0 == 0x00b3
                    00B3    422 _P3_3	=	0x00b3
                    00B2    423 G$P3_2$0$0 == 0x00b2
                    00B2    424 _P3_2	=	0x00b2
                    00B1    425 G$P3_1$0$0 == 0x00b1
                    00B1    426 _P3_1	=	0x00b1
                    00B0    427 G$P3_0$0$0 == 0x00b0
                    00B0    428 _P3_0	=	0x00b0
                    00B7    429 G$RD$0$0 == 0x00b7
                    00B7    430 _RD	=	0x00b7
                    00B6    431 G$WR$0$0 == 0x00b6
                    00B6    432 _WR	=	0x00b6
                    00B5    433 G$T1$0$0 == 0x00b5
                    00B5    434 _T1	=	0x00b5
                    00B4    435 G$T0$0$0 == 0x00b4
                    00B4    436 _T0	=	0x00b4
                    00B3    437 G$INT1$0$0 == 0x00b3
                    00B3    438 _INT1	=	0x00b3
                    00B2    439 G$INT0$0$0 == 0x00b2
                    00B2    440 _INT0	=	0x00b2
                    00B1    441 G$TXD$0$0 == 0x00b1
                    00B1    442 _TXD	=	0x00b1
                    00B0    443 G$RXD$0$0 == 0x00b0
                    00B0    444 _RXD	=	0x00b0
                    00C1    445 G$P4_1$0$0 == 0x00c1
                    00C1    446 _P4_1	=	0x00c1
                    00C0    447 G$P4_0$0$0 == 0x00c0
                    00C0    448 _P4_0	=	0x00c0
                    00D7    449 G$CY$0$0 == 0x00d7
                    00D7    450 _CY	=	0x00d7
                    00D6    451 G$AC$0$0 == 0x00d6
                    00D6    452 _AC	=	0x00d6
                    00D5    453 G$F0$0$0 == 0x00d5
                    00D5    454 _F0	=	0x00d5
                    00D4    455 G$RS1$0$0 == 0x00d4
                    00D4    456 _RS1	=	0x00d4
                    00D3    457 G$RS0$0$0 == 0x00d3
                    00D3    458 _RS0	=	0x00d3
                    00D2    459 G$OV$0$0 == 0x00d2
                    00D2    460 _OV	=	0x00d2
                    00D1    461 G$UD$0$0 == 0x00d1
                    00D1    462 _UD	=	0x00d1
                    00D0    463 G$P$0$0 == 0x00d0
                    00D0    464 _P	=	0x00d0
                    008F    465 G$TF1$0$0 == 0x008f
                    008F    466 _TF1	=	0x008f
                    008E    467 G$TR1$0$0 == 0x008e
                    008E    468 _TR1	=	0x008e
                    008D    469 G$TF0$0$0 == 0x008d
                    008D    470 _TF0	=	0x008d
                    008C    471 G$TR0$0$0 == 0x008c
                    008C    472 _TR0	=	0x008c
                    008B    473 G$IE1$0$0 == 0x008b
                    008B    474 _IE1	=	0x008b
                    008A    475 G$IT1$0$0 == 0x008a
                    008A    476 _IT1	=	0x008a
                    0089    477 G$IE0$0$0 == 0x0089
                    0089    478 _IE0	=	0x0089
                    0088    479 G$IT0$0$0 == 0x0088
                    0088    480 _IT0	=	0x0088
                    00CF    481 G$TF2$0$0 == 0x00cf
                    00CF    482 _TF2	=	0x00cf
                    00CE    483 G$EXF2$0$0 == 0x00ce
                    00CE    484 _EXF2	=	0x00ce
                    00CD    485 G$RCLK$0$0 == 0x00cd
                    00CD    486 _RCLK	=	0x00cd
                    00CC    487 G$TCLK$0$0 == 0x00cc
                    00CC    488 _TCLK	=	0x00cc
                    00CB    489 G$EXEN2$0$0 == 0x00cb
                    00CB    490 _EXEN2	=	0x00cb
                    00CA    491 G$TR2$0$0 == 0x00ca
                    00CA    492 _TR2	=	0x00ca
                    00C9    493 G$C_T2$0$0 == 0x00c9
                    00C9    494 _C_T2	=	0x00c9
                    00C8    495 G$CP_RL2$0$0 == 0x00c8
                    00C8    496 _CP_RL2	=	0x00c8
                    009F    497 G$SM0$0$0 == 0x009f
                    009F    498 _SM0	=	0x009f
                    009F    499 G$FE$0$0 == 0x009f
                    009F    500 _FE	=	0x009f
                    009E    501 G$SM1$0$0 == 0x009e
                    009E    502 _SM1	=	0x009e
                    009D    503 G$SM2$0$0 == 0x009d
                    009D    504 _SM2	=	0x009d
                    009C    505 G$REN$0$0 == 0x009c
                    009C    506 _REN	=	0x009c
                    009B    507 G$TB8$0$0 == 0x009b
                    009B    508 _TB8	=	0x009b
                    009A    509 G$RB8$0$0 == 0x009a
                    009A    510 _RB8	=	0x009a
                    0099    511 G$TI$0$0 == 0x0099
                    0099    512 _TI	=	0x0099
                    0098    513 G$RI$0$0 == 0x0098
                    0098    514 _RI	=	0x0098
                    00AF    515 G$EA$0$0 == 0x00af
                    00AF    516 _EA	=	0x00af
                    00AE    517 G$EC$0$0 == 0x00ae
                    00AE    518 _EC	=	0x00ae
                    00AD    519 G$ET2$0$0 == 0x00ad
                    00AD    520 _ET2	=	0x00ad
                    00AC    521 G$ES$0$0 == 0x00ac
                    00AC    522 _ES	=	0x00ac
                    00AB    523 G$ET1$0$0 == 0x00ab
                    00AB    524 _ET1	=	0x00ab
                    00AA    525 G$EX1$0$0 == 0x00aa
                    00AA    526 _EX1	=	0x00aa
                    00A9    527 G$ET0$0$0 == 0x00a9
                    00A9    528 _ET0	=	0x00a9
                    00A8    529 G$EX0$0$0 == 0x00a8
                    00A8    530 _EX0	=	0x00a8
                    00EA    531 G$ETIM$0$0 == 0x00ea
                    00EA    532 _ETIM	=	0x00ea
                    00E9    533 G$EADC$0$0 == 0x00e9
                    00E9    534 _EADC	=	0x00e9
                    00E8    535 G$ECAN$0$0 == 0x00e8
                    00E8    536 _ECAN	=	0x00e8
                    00DF    537 G$CF$0$0 == 0x00df
                    00DF    538 _CF	=	0x00df
                    00DE    539 G$CR$0$0 == 0x00de
                    00DE    540 _CR	=	0x00de
                    00DC    541 G$CCF4$0$0 == 0x00dc
                    00DC    542 _CCF4	=	0x00dc
                    00DB    543 G$CCF3$0$0 == 0x00db
                    00DB    544 _CCF3	=	0x00db
                    00DA    545 G$CCF2$0$0 == 0x00da
                    00DA    546 _CCF2	=	0x00da
                    00D9    547 G$CCF1$0$0 == 0x00d9
                    00D9    548 _CCF1	=	0x00d9
                    00D8    549 G$CCF0$0$0 == 0x00d8
                    00D8    550 _CCF0	=	0x00d8
                            551 ;--------------------------------------------------------
                            552 ; overlayable register banks
                            553 ;--------------------------------------------------------
                            554 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                     555 	.ds 8
                            556 ;--------------------------------------------------------
                            557 ; internal ram data
                            558 ;--------------------------------------------------------
                            559 	.area DSEG    (DATA)
                    0000    560 G$u32Tmr0Reload$0$0==.
   0000                     561 _u32Tmr0Reload::
   0000                     562 	.ds 4
                    0004    563 G$u32Tmr0TmpReload$0$0==.
   0004                     564 _u32Tmr0TmpReload::
   0004                     565 	.ds 4
                    0008    566 G$Tmr0UsrIsrFnc$0$0==.
   0008                     567 _Tmr0UsrIsrFnc::
   0008                     568 	.ds 2
                            569 ;--------------------------------------------------------
                            570 ; overlayable items in internal ram 
                            571 ;--------------------------------------------------------
                            572 	.area	OSEG    (OVR,DATA)
                    0000    573 LTmr0Init$Typ$1$1==.
   0000                     574 _Tmr0Init_PARM_2::
   0000                     575 	.ds 1
                            576 	.area	OSEG    (OVR,DATA)
                            577 ;--------------------------------------------------------
                            578 ; indirectly addressable internal ram data
                            579 ;--------------------------------------------------------
                            580 	.area ISEG    (DATA)
                            581 ;--------------------------------------------------------
                            582 ; absolute internal ram data
                            583 ;--------------------------------------------------------
                            584 	.area IABS    (ABS,DATA)
                            585 	.area IABS    (ABS,DATA)
                            586 ;--------------------------------------------------------
                            587 ; bit data
                            588 ;--------------------------------------------------------
                            589 	.area BSEG    (BIT)
                    0000    590 LTmr0SetTime$bTR0$1$1==.
   0000                     591 _Tmr0SetTime_bTR0_1_1:
   0000                     592 	.ds 1
                    0001    593 LTmr0SetTime$bET0$1$1==.
   0001                     594 _Tmr0SetTime_bET0_1_1:
   0001                     595 	.ds 1
                            596 ;--------------------------------------------------------
                            597 ; paged external ram data
                            598 ;--------------------------------------------------------
                            599 	.area PSEG    (PAG,XDATA)
                            600 ;--------------------------------------------------------
                            601 ; external ram data
                            602 ;--------------------------------------------------------
                            603 	.area XSEG    (XDATA)
                            604 ;--------------------------------------------------------
                            605 ; absolute external ram data
                            606 ;--------------------------------------------------------
                            607 	.area XABS    (ABS,XDATA)
                            608 ;--------------------------------------------------------
                            609 ; external initialized ram data
                            610 ;--------------------------------------------------------
                            611 	.area XISEG   (XDATA)
                            612 	.area HOME    (CODE)
                            613 	.area GSINIT0 (CODE)
                            614 	.area GSINIT1 (CODE)
                            615 	.area GSINIT2 (CODE)
                            616 	.area GSINIT3 (CODE)
                            617 	.area GSINIT4 (CODE)
                            618 	.area GSINIT5 (CODE)
                            619 	.area GSINIT  (CODE)
                            620 	.area GSFINAL (CODE)
                            621 	.area CSEG    (CODE)
                            622 ;--------------------------------------------------------
                            623 ; global & static initialisations
                            624 ;--------------------------------------------------------
                            625 	.area HOME    (CODE)
                            626 	.area GSINIT  (CODE)
                            627 	.area GSFINAL (CODE)
                            628 	.area GSINIT  (CODE)
                    0000    629 	G$Tmr0IsrFnc$0$0 ==.
                    0000    630 	C$timer0.c$22$1$1 ==.
                            631 ;	timer0.c:22: void (*Tmr0UsrIsrFnc) (void) = NULL_FNC;
   0000 E4                  632 	clr	a
   0001 F5*08               633 	mov	_Tmr0UsrIsrFnc,a
   0003 F5*09               634 	mov	(_Tmr0UsrIsrFnc + 1),a
                            635 ;--------------------------------------------------------
                            636 ; Home
                            637 ;--------------------------------------------------------
                            638 	.area HOME    (CODE)
                            639 	.area HOME    (CODE)
                            640 ;--------------------------------------------------------
                            641 ; code
                            642 ;--------------------------------------------------------
                            643 	.area CSEG    (CODE)
                            644 ;------------------------------------------------------------
                            645 ;Allocation info for local variables in function 'Tmr0Init'
                            646 ;------------------------------------------------------------
                            647 ;Typ                       Allocated with name '_Tmr0Init_PARM_2'
                            648 ;Mode                      Allocated to registers r2 
                            649 ;------------------------------------------------------------
                    0000    650 	G$Tmr0Init$0$0 ==.
                    0000    651 	C$timer0.c$30$0$0 ==.
                            652 ;	timer0.c:30: void Tmr0Init(TTmrMode Mode, TTmrTyp Typ)
                            653 ;	-----------------------------------------
                            654 ;	 function Tmr0Init
                            655 ;	-----------------------------------------
   0000                     656 _Tmr0Init:
                    0002    657 	ar2 = 0x02
                    0003    658 	ar3 = 0x03
                    0004    659 	ar4 = 0x04
                    0005    660 	ar5 = 0x05
                    0006    661 	ar6 = 0x06
                    0007    662 	ar7 = 0x07
                    0000    663 	ar0 = 0x00
                    0001    664 	ar1 = 0x01
   0000 AA 82               665 	mov	r2,dpl
                    0002    666 	C$timer0.c$33$1$1 ==.
                            667 ;	timer0.c:33: TMOD &= ~0x03;
   0002 53 89 FC            668 	anl	_TMOD,#0xFC
                    0005    669 	C$timer0.c$34$1$1 ==.
                            670 ;	timer0.c:34: TMOD |= (Mode &0x03);
   0005 74 03               671 	mov	a,#0x03
   0007 5A                  672 	anl	a,r2
   0008 42 89               673 	orl	_TMOD,a
                    000A    674 	C$timer0.c$37$1$1 ==.
                            675 ;	timer0.c:37: TMOD &= ~0x04;
   000A 53 89 FB            676 	anl	_TMOD,#0xFB
                    000D    677 	C$timer0.c$38$1$1 ==.
                            678 ;	timer0.c:38: TMOD |= ((Typ << 2) & 0x04);
   000D E5*00               679 	mov	a,_Tmr0Init_PARM_2
   000F 25*00               680 	add	a,_Tmr0Init_PARM_2
   0011 25 E0               681 	add	a,acc
   0013 FA                  682 	mov	r2,a
   0014 74 04               683 	mov	a,#0x04
   0016 5A                  684 	anl	a,r2
   0017 42 89               685 	orl	_TMOD,a
                    0019    686 	C$timer0.c$39$1$1 ==.
                    0019    687 	XG$Tmr0Init$0$0 ==.
   0019 22                  688 	ret
                            689 ;------------------------------------------------------------
                            690 ;Allocation info for local variables in function 'Tmr0SetTime'
                            691 ;------------------------------------------------------------
                            692 ;u16Zeit                   Allocated to registers r2 r3 
                            693 ;------------------------------------------------------------
                    001A    694 	G$Tmr0SetTime$0$0 ==.
                    001A    695 	C$timer0.c$52$1$1 ==.
                            696 ;	timer0.c:52: void Tmr0SetTime(__u16 u16Zeit) __critical
                            697 ;	-----------------------------------------
                            698 ;	 function Tmr0SetTime
                            699 ;	-----------------------------------------
   001A                     700 _Tmr0SetTime:
   001A D3                  701 	setb	c
   001B 10 AF 01            702 	jbc	ea,00108$
   001E C3                  703 	clr	c
   001F                     704 00108$:
   001F C0 D0               705 	push	psw
   0021 AA 82               706 	mov	r2,dpl
   0023 AB 83               707 	mov	r3,dph
                    0025    708 	C$timer0.c$54$1$1 ==.
                            709 ;	timer0.c:54: __bit bTR0 = TR0;
   0025 A2 8C               710 	mov	c,_TR0
   0027 92*00               711 	mov	_Tmr0SetTime_bTR0_1_1,c
                    0029    712 	C$timer0.c$55$1$1 ==.
                            713 ;	timer0.c:55: __bit bET0 = ET0;
   0029 A2 A9               714 	mov	c,_ET0
   002B 92*01               715 	mov	_Tmr0SetTime_bET0_1_1,c
                    002D    716 	C$timer0.c$58$1$1 ==.
                            717 ;	timer0.c:58: TR0 = 0;
   002D C2 8C               718 	clr	_TR0
                    002F    719 	C$timer0.c$59$1$1 ==.
                            720 ;	timer0.c:59: u32Tmr0Reload = (SysGetQuarzFreq() / 1000L) * u16Zeit;
   002F C0 02               721 	push	ar2
   0031 C0 03               722 	push	ar3
   0033 12s00r00            723 	lcall	_SysGetQuarzFreq
   0036 75*00 E8            724 	mov	__divulong_PARM_2,#0xE8
   0039 75*01 03            725 	mov	(__divulong_PARM_2 + 1),#0x03
   003C 75*02 00            726 	mov	(__divulong_PARM_2 + 2),#0x00
   003F 75*03 00            727 	mov	(__divulong_PARM_2 + 3),#0x00
   0042 12s00r00            728 	lcall	__divulong
   0045 AC 82               729 	mov	r4,dpl
   0047 AD 83               730 	mov	r5,dph
   0049 AE F0               731 	mov	r6,b
   004B FF                  732 	mov	r7,a
   004C D0 03               733 	pop	ar3
   004E D0 02               734 	pop	ar2
   0050 8A*00               735 	mov	__mullong_PARM_2,r2
   0052 8B*01               736 	mov	(__mullong_PARM_2 + 1),r3
   0054 75*02 00            737 	mov	(__mullong_PARM_2 + 2),#0x00
   0057 75*03 00            738 	mov	(__mullong_PARM_2 + 3),#0x00
   005A 8C 82               739 	mov	dpl,r4
   005C 8D 83               740 	mov	dph,r5
   005E 8E F0               741 	mov	b,r6
   0060 EF                  742 	mov	a,r7
   0061 12s00r00            743 	lcall	__mullong
   0064 85 82*00            744 	mov	_u32Tmr0Reload,dpl
   0067 85 83*01            745 	mov	(_u32Tmr0Reload + 1),dph
   006A 85 F0*02            746 	mov	(_u32Tmr0Reload + 2),b
   006D F5*03               747 	mov	(_u32Tmr0Reload + 3),a
                    006F    748 	C$timer0.c$60$1$1 ==.
                            749 ;	timer0.c:60: u32Tmr0Reload /= 6;
   006F 75*00 06            750 	mov	__divulong_PARM_2,#0x06
   0072 E4                  751 	clr	a
   0073 F5*01               752 	mov	(__divulong_PARM_2 + 1),a
   0075 F5*02               753 	mov	(__divulong_PARM_2 + 2),a
   0077 F5*03               754 	mov	(__divulong_PARM_2 + 3),a
   0079 85*00 82            755 	mov	dpl,_u32Tmr0Reload
   007C 85*01 83            756 	mov	dph,(_u32Tmr0Reload + 1)
   007F 85*02 F0            757 	mov	b,(_u32Tmr0Reload + 2)
   0082 E5*03               758 	mov	a,(_u32Tmr0Reload + 3)
   0084 12s00r00            759 	lcall	__divulong
   0087 85 82*00            760 	mov	_u32Tmr0Reload,dpl
   008A 85 83*01            761 	mov	(_u32Tmr0Reload + 1),dph
   008D 85 F0*02            762 	mov	(_u32Tmr0Reload + 2),b
   0090 F5*03               763 	mov	(_u32Tmr0Reload + 3),a
                    0092    764 	C$timer0.c$63$1$1 ==.
                            765 ;	timer0.c:63: if ((isrFncTmr0 != Tmr0IsrFnc) && (Tmr0UsrIsrFnc != Tmr0IsrFnc))
   0092 74r02               766 	mov	a,#_Tmr0IsrFnc
   0094 B5*00 07            767 	cjne	a,_isrFncTmr0,00109$
   0097 74s01               768 	mov	a,#(_Tmr0IsrFnc >> 8)
   0099 B5*01 02            769 	cjne	a,(_isrFncTmr0 + 1),00109$
   009C 80 18               770 	sjmp	00102$
   009E                     771 00109$:
   009E 74r02               772 	mov	a,#_Tmr0IsrFnc
   00A0 B5*08 07            773 	cjne	a,_Tmr0UsrIsrFnc,00110$
   00A3 74s01               774 	mov	a,#(_Tmr0IsrFnc >> 8)
   00A5 B5*09 02            775 	cjne	a,(_Tmr0UsrIsrFnc + 1),00110$
   00A8 80 0C               776 	sjmp	00102$
   00AA                     777 00110$:
                    00AA    778 	C$timer0.c$65$2$2 ==.
                            779 ;	timer0.c:65: Tmr0UsrIsrFnc = isrFncTmr0;
   00AA 85*00*08            780 	mov	_Tmr0UsrIsrFnc,_isrFncTmr0
   00AD 85*01*09            781 	mov	(_Tmr0UsrIsrFnc + 1),(_isrFncTmr0 + 1)
                    00B0    782 	C$timer0.c$66$2$2 ==.
                            783 ;	timer0.c:66: isrFncTmr0 = Tmr0IsrFnc;
   00B0 75*00r02            784 	mov	_isrFncTmr0,#_Tmr0IsrFnc
   00B3 75*01s01            785 	mov	(_isrFncTmr0 + 1),#(_Tmr0IsrFnc >> 8)
   00B6                     786 00102$:
                    00B6    787 	C$timer0.c$69$1$1 ==.
                            788 ;	timer0.c:69: TR0 = bTR0;
   00B6 A2*00               789 	mov	c,_Tmr0SetTime_bTR0_1_1
   00B8 92 8C               790 	mov	_TR0,c
                    00BA    791 	C$timer0.c$70$1$1 ==.
                            792 ;	timer0.c:70: ET0 = bET0;
   00BA A2*01               793 	mov	c,_Tmr0SetTime_bET0_1_1
   00BC 92 A9               794 	mov	_ET0,c
   00BE D0 D0               795 	pop	psw
   00C0 92 AF               796 	mov	ea,c
                    00C2    797 	C$timer0.c$71$1$1 ==.
                    00C2    798 	XG$Tmr0SetTime$0$0 ==.
   00C2 22                  799 	ret
                            800 ;------------------------------------------------------------
                            801 ;Allocation info for local variables in function 'Tmr0SetValue'
                            802 ;------------------------------------------------------------
                            803 ;u16Value                  Allocated to registers r2 r3 
                            804 ;------------------------------------------------------------
                    00C3    805 	G$Tmr0SetValue$0$0 ==.
                    00C3    806 	C$timer0.c$78$1$1 ==.
                            807 ;	timer0.c:78: void Tmr0SetValue(__u16 u16Value) __critical
                            808 ;	-----------------------------------------
                            809 ;	 function Tmr0SetValue
                            810 ;	-----------------------------------------
   00C3                     811 _Tmr0SetValue:
   00C3 D3                  812 	setb	c
   00C4 10 AF 01            813 	jbc	ea,00103$
   00C7 C3                  814 	clr	c
   00C8                     815 00103$:
   00C8 C0 D0               816 	push	psw
   00CA AA 82               817 	mov	r2,dpl
   00CC AB 83               818 	mov	r3,dph
                    00CE    819 	C$timer0.c$80$1$1 ==.
                            820 ;	timer0.c:80: TL0 = (__u16) (u16Value & 0x00FF);
   00CE 8A 04               821 	mov	ar4,r2
   00D0 8C 8A               822 	mov	_TL0,r4
                    00D2    823 	C$timer0.c$81$1$1 ==.
                            824 ;	timer0.c:81: TH0 = (__u16) (u16Value >> 8);
   00D2 8B 02               825 	mov	ar2,r3
   00D4 8A 8C               826 	mov	_TH0,r2
   00D6 D0 D0               827 	pop	psw
   00D8 92 AF               828 	mov	ea,c
                    00DA    829 	C$timer0.c$82$1$1 ==.
                    00DA    830 	XG$Tmr0SetValue$0$0 ==.
   00DA 22                  831 	ret
                            832 ;------------------------------------------------------------
                            833 ;Allocation info for local variables in function 'Tmr0GetValue'
                            834 ;------------------------------------------------------------
                            835 ;------------------------------------------------------------
                    00DB    836 	G$Tmr0GetValue$0$0 ==.
                    00DB    837 	C$timer0.c$89$1$1 ==.
                            838 ;	timer0.c:89: __u16 Tmr0GetValue(void) __critical
                            839 ;	-----------------------------------------
                            840 ;	 function Tmr0GetValue
                            841 ;	-----------------------------------------
   00DB                     842 _Tmr0GetValue:
   00DB D3                  843 	setb	c
   00DC 10 AF 01            844 	jbc	ea,00108$
   00DF C3                  845 	clr	c
   00E0                     846 00108$:
   00E0 C0 D0               847 	push	psw
                    00E2    848 	C$timer0.c$91$1$1 ==.
                            849 ;	timer0.c:91: return (__u16)(((__u16)TH0 << 8) || TL0);
   00E2 AA 8C               850 	mov	r2,_TH0
   00E4 8A 03               851 	mov	ar3,r2
   00E6 E4                  852 	clr	a
   00E7 FA                  853 	mov	r2,a
   00E8 4B                  854 	orl	a,r3
   00E9 70 07               855 	jnz	00104$
   00EB E5 8A               856 	mov	a,_TL0
   00ED 70 03               857 	jnz	00104$
   00EF FA                  858 	mov	r2,a
   00F0 80 02               859 	sjmp	00105$
   00F2                     860 00104$:
   00F2 7A 01               861 	mov	r2,#0x01
   00F4                     862 00105$:
   00F4 EA                  863 	mov	a,r2
   00F5 33                  864 	rlc	a
   00F6 95 E0               865 	subb	a,acc
   00F8 FB                  866 	mov	r3,a
   00F9 8A 82               867 	mov	dpl,r2
   00FB 8B 83               868 	mov	dph,r3
   00FD D0 D0               869 	pop	psw
   00FF 92 AF               870 	mov	ea,c
                    0101    871 	C$timer0.c$92$1$1 ==.
                    0101    872 	XG$Tmr0GetValue$0$0 ==.
   0101 22                  873 	ret
                            874 ;------------------------------------------------------------
                            875 ;Allocation info for local variables in function 'Tmr0IsrFnc'
                            876 ;------------------------------------------------------------
                            877 ;------------------------------------------------------------
                    0102    878 	G$Tmr0IsrFnc$0$0 ==.
                    0102    879 	C$timer0.c$102$1$1 ==.
                            880 ;	timer0.c:102: void Tmr0IsrFnc(void) __critical
                            881 ;	-----------------------------------------
                            882 ;	 function Tmr0IsrFnc
                            883 ;	-----------------------------------------
   0102                     884 _Tmr0IsrFnc:
   0102 D3                  885 	setb	c
   0103 10 AF 01            886 	jbc	ea,00113$
   0106 C3                  887 	clr	c
   0107                     888 00113$:
   0107 C0 D0               889 	push	psw
                    0109    890 	C$timer0.c$105$1$1 ==.
                            891 ;	timer0.c:105: if (u32Tmr0TmpReload == 0)
   0109 E5*04               892 	mov	a,_u32Tmr0TmpReload
   010B 45*05               893 	orl	a,(_u32Tmr0TmpReload + 1)
   010D 45*06               894 	orl	a,(_u32Tmr0TmpReload + 2)
   010F 45*07               895 	orl	a,(_u32Tmr0TmpReload + 3)
   0111 70 1B               896 	jnz	00104$
                    0113    897 	C$timer0.c$107$2$2 ==.
                            898 ;	timer0.c:107: u32Tmr0TmpReload = u32Tmr0Reload;
   0113 85*00*04            899 	mov	_u32Tmr0TmpReload,_u32Tmr0Reload
   0116 85*01*05            900 	mov	(_u32Tmr0TmpReload + 1),(_u32Tmr0Reload + 1)
   0119 85*02*06            901 	mov	(_u32Tmr0TmpReload + 2),(_u32Tmr0Reload + 2)
   011C 85*03*07            902 	mov	(_u32Tmr0TmpReload + 3),(_u32Tmr0Reload + 3)
                    011F    903 	C$timer0.c$108$2$2 ==.
                            904 ;	timer0.c:108: if (Tmr0UsrIsrFnc != NULL_FNC)
   011F E5*08               905 	mov	a,_Tmr0UsrIsrFnc
   0121 45*09               906 	orl	a,(_Tmr0UsrIsrFnc + 1)
   0123 60 09               907 	jz	00104$
                    0125    908 	C$timer0.c$110$3$3 ==.
                            909 ;	timer0.c:110: Tmr0UsrIsrFnc();
   0125 85*08 82            910 	mov	dpl,_Tmr0UsrIsrFnc
   0128 85*09 83            911 	mov	dph,(_Tmr0UsrIsrFnc + 1)
   012B 12s00r00            912 	lcall	__sdcc_call_dptr
   012E                     913 00104$:
                    012E    914 	C$timer0.c$114$1$1 ==.
                            915 ;	timer0.c:114: if (u32Tmr0TmpReload < 0x0000FFFFL)
   012E C3                  916 	clr	c
   012F E5*04               917 	mov	a,_u32Tmr0TmpReload
   0131 94 FF               918 	subb	a,#0xFF
   0133 E5*05               919 	mov	a,(_u32Tmr0TmpReload + 1)
   0135 94 FF               920 	subb	a,#0xFF
   0137 E5*06               921 	mov	a,(_u32Tmr0TmpReload + 2)
   0139 94 00               922 	subb	a,#0x00
   013B E5*07               923 	mov	a,(_u32Tmr0TmpReload + 3)
   013D 94 00               924 	subb	a,#0x00
   013F 50 2D               925 	jnc	00106$
                    0141    926 	C$timer0.c$116$2$4 ==.
                            927 ;	timer0.c:116: u32Tmr0TmpReload = (-u32Tmr0TmpReload);
   0141 C3                  928 	clr	c
   0142 E4                  929 	clr	a
   0143 95*04               930 	subb	a,_u32Tmr0TmpReload
   0145 F5*04               931 	mov	_u32Tmr0TmpReload,a
   0147 E4                  932 	clr	a
   0148 95*05               933 	subb	a,(_u32Tmr0TmpReload + 1)
   014A F5*05               934 	mov	(_u32Tmr0TmpReload + 1),a
   014C E4                  935 	clr	a
   014D 95*06               936 	subb	a,(_u32Tmr0TmpReload + 2)
   014F F5*06               937 	mov	(_u32Tmr0TmpReload + 2),a
   0151 E4                  938 	clr	a
   0152 95*07               939 	subb	a,(_u32Tmr0TmpReload + 3)
   0154 F5*07               940 	mov	(_u32Tmr0TmpReload + 3),a
                    0156    941 	C$timer0.c$118$2$4 ==.
                            942 ;	timer0.c:118: TL0 = (__u8) (u32Tmr0TmpReload & 0xFF);
   0156 AA*04               943 	mov	r2,_u32Tmr0TmpReload
   0158 7B 00               944 	mov	r3,#0x00
   015A 7C 00               945 	mov	r4,#0x00
   015C 7D 00               946 	mov	r5,#0x00
   015E 8A 8A               947 	mov	_TL0,r2
                    0160    948 	C$timer0.c$119$2$4 ==.
                            949 ;	timer0.c:119: TH0 = (__u8) (u32Tmr0TmpReload >> 8);
   0160 85*05 8C            950 	mov	_TH0,(_u32Tmr0TmpReload + 1)
                    0163    951 	C$timer0.c$120$2$4 ==.
                            952 ;	timer0.c:120: u32Tmr0TmpReload = 0;
   0163 E4                  953 	clr	a
   0164 F5*04               954 	mov	_u32Tmr0TmpReload,a
   0166 F5*05               955 	mov	(_u32Tmr0TmpReload + 1),a
   0168 F5*06               956 	mov	(_u32Tmr0TmpReload + 2),a
   016A F5*07               957 	mov	(_u32Tmr0TmpReload + 3),a
   016C 80 17               958 	sjmp	00108$
   016E                     959 00106$:
                    016E    960 	C$timer0.c$125$2$5 ==.
                            961 ;	timer0.c:125: u32Tmr0TmpReload -= 0xFFFFL;
   016E E5*04               962 	mov	a,_u32Tmr0TmpReload
   0170 24 01               963 	add	a,#0x01
   0172 F5*04               964 	mov	_u32Tmr0TmpReload,a
   0174 E4                  965 	clr	a
   0175 35*05               966 	addc	a,(_u32Tmr0TmpReload + 1)
   0177 F5*05               967 	mov	(_u32Tmr0TmpReload + 1),a
   0179 E5*06               968 	mov	a,(_u32Tmr0TmpReload + 2)
   017B 34 FF               969 	addc	a,#0xff
   017D F5*06               970 	mov	(_u32Tmr0TmpReload + 2),a
   017F E5*07               971 	mov	a,(_u32Tmr0TmpReload + 3)
   0181 34 FF               972 	addc	a,#0xff
   0183 F5*07               973 	mov	(_u32Tmr0TmpReload + 3),a
   0185                     974 00108$:
   0185 D0 D0               975 	pop	psw
   0187 92 AF               976 	mov	ea,c
                    0189    977 	C$timer0.c$127$1$1 ==.
                    0189    978 	XG$Tmr0IsrFnc$0$0 ==.
   0189 22                  979 	ret
                            980 	.area CSEG    (CODE)
                            981 	.area CONST   (CODE)
                            982 	.area XINIT   (CODE)
                            983 	.area CABS    (ABS,CODE)
